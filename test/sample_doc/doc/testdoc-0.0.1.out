--- !ruby/object:RaComment 
attributes: 
  id: 2
  comment: ""
new_record: true

--- !ruby/object:RaFile 
attributes: 
  ra_comment_id: 2
  name: testdoc-0.0.1/base.rb
  ra_library_id: 0
  type: RaFile
  id: 3
  parent_id: 0
  full_name: testdoc-0.0.1/base.rb
new_record: true

--- !ruby/object:RaRequire 
attributes: 
  name: yaml
  file_id: 3
  ra_container_id: 3
  type: RaRequire
  id: 4
  comment: 
new_record: true

--- !ruby/object:RaRequire 
attributes: 
  name: set
  file_id: 3
  ra_container_id: 3
  type: RaRequire
  id: 5
  comment: 
new_record: true

--- !ruby/object:RaRequire 
attributes: 
  name: active_record/deprecated_finders
  file_id: 3
  ra_container_id: 3
  type: RaRequire
  id: 6
  comment: 
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 7
  comment: ""
new_record: true

--- !ruby/object:RaModule 
attributes: 
  superclass: 
  ra_comment_id: 7
  name: ActiveRecord
  ra_library_id: 0
  type: RaModule
  id: 8
  parent_id: 3
  full_name: ActiveRecord
new_record: true

--- !ruby/object:RaInFile 
attributes: 
  ra_container_id: 8
  file_name: testdoc-0.0.1/base.rb
  id: 9
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 10
  comment: ""
new_record: true

--- !ruby/object:RaClass 
attributes: 
  superclass: StandardError
  ra_comment_id: 10
  name: ReadOnlyRecord
  ra_library_id: 0
  type: RaClass
  id: 11
  parent_id: 8
  full_name: ActiveRecord::ReadOnlyRecord
new_record: true

--- !ruby/object:RaInFile 
attributes: 
  ra_container_id: 11
  file_name: testdoc-0.0.1/base.rb
  id: 12
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 13
  comment: ""
new_record: true

--- !ruby/object:RaClass 
attributes: 
  superclass: ActiveRecordError
  ra_comment_id: 13
  name: StatementInvalid
  ra_library_id: 0
  type: RaClass
  id: 14
  parent_id: 8
  full_name: ActiveRecord::StatementInvalid
new_record: true

--- !ruby/object:RaInFile 
attributes: 
  ra_container_id: 14
  file_name: testdoc-0.0.1/base.rb
  id: 15
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 16
  comment: ""
new_record: true

--- !ruby/object:RaClass 
attributes: 
  superclass: ActiveRecordError
  ra_comment_id: 16
  name: AdapterNotSpecified
  ra_library_id: 0
  type: RaClass
  id: 17
  parent_id: 8
  full_name: ActiveRecord::AdapterNotSpecified
new_record: true

--- !ruby/object:RaInFile 
attributes: 
  ra_container_id: 17
  file_name: testdoc-0.0.1/base.rb
  id: 18
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 19
  comment: ""
new_record: true

--- !ruby/object:RaClass 
attributes: 
  superclass: ActiveRecordError
  ra_comment_id: 19
  name: AttributeAssignmentError
  ra_library_id: 0
  type: RaClass
  id: 20
  parent_id: 8
  full_name: ActiveRecord::AttributeAssignmentError
new_record: true

--- !ruby/object:RaInFile 
attributes: 
  ra_container_id: 20
  file_name: testdoc-0.0.1/base.rb
  id: 21
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 22
  comment: ""
new_record: true

--- !ruby/object:RaClass 
attributes: 
  superclass: ActiveRecordError
  ra_comment_id: 22
  name: AssociationTypeMismatch
  ra_library_id: 0
  type: RaClass
  id: 23
  parent_id: 8
  full_name: ActiveRecord::AssociationTypeMismatch
new_record: true

--- !ruby/object:RaInFile 
attributes: 
  ra_container_id: 23
  file_name: testdoc-0.0.1/base.rb
  id: 24
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 25
  comment: ""
new_record: true

--- !ruby/object:RaClass 
attributes: 
  superclass: ActiveRecordError
  ra_comment_id: 25
  name: RecordNotFound
  ra_library_id: 0
  type: RaClass
  id: 26
  parent_id: 8
  full_name: ActiveRecord::RecordNotFound
new_record: true

--- !ruby/object:RaInFile 
attributes: 
  ra_container_id: 26
  file_name: testdoc-0.0.1/base.rb
  id: 27
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 28
  comment: |
    # Active Record objects don't specify their attributes directly, but rather infer them from the table definition with
    # which they're linked. Adding, removing, and changing attributes and their type is done directly in the database. Any change
    # is instantly reflected in the Active Record objects. The mapping that binds a given Active Record class to a certain
    # database table will happen automatically in most common cases, but can be overwritten for the uncommon ones.
    #
    # See the mapping rules in table_name and the full example in link:files/README.html for more insight.
    #
    # == Creation
    #
    # Active Records accept constructor parameters either in a hash or as a block. The hash method is especially useful when
    # you're receiving the data from somewhere else, like a HTTP request. It works like this:
    #
    #   user = User.new(:name => "David", :occupation => "Code Artist")
    #   user.name # => "David"
    #
    # You can also use block initialization:
    #
    #   user = User.new do |u|
    #     u.name = "David"
    #     u.occupation = "Code Artist"
    #   end
    #
    # And of course you can just create a bare object and specify the attributes after the fact:
    #
    #   user = User.new
    #   user.name = "David"
    #   user.occupation = "Code Artist"
    #
    # == Conditions
    #
    # Conditions can either be specified as a string or an array representing the WHERE-part of an SQL statement.
    # The array form is to be used when the condition input is tainted and requires sanitization. The string form can
    # be used for statements that don't involve tainted data. Examples:
    #
    #   User < ActiveRecord::Base
    #     def self.authenticate_unsafely(user_name, password)
    #       find(:first, :conditions => "user_name = '#{user_name}' AND password = '#{password}'")
    #     end
    #
    #     def self.authenticate_safely(user_name, password)
    #       find(:first, :conditions => [ "user_name = ? AND password = ?", user_name, password ])
    #     end
    #   end
    #
    # The <tt>authenticate_unsafely</tt> method inserts the parameters directly into the query and is thus susceptible to SQL-injection
    # attacks if the <tt>user_name</tt> and +password+ parameters come directly from a HTTP request. The <tt>authenticate_safely</tt> method,
    # on the other hand, will sanitize the <tt>user_name</tt> and +password+ before inserting them in the query, which will ensure that
    # an attacker can't escape the query and fake the login (or worse).
    #
    # When using multiple parameters in the conditions, it can easily become hard to read exactly what the fourth or fifth
    # question mark is supposed to represent. In those cases, you can resort to named bind variables instead. That's done by replacing
    # the question marks with symbols and supplying a hash with values for the matching symbol keys:
    #
    #   Company.find(:first, [
    #     "id = :id AND name = :name AND division = :division AND created_at > :accounting_date",
    #     { :id => 3, :name => "37signals", :division => "First", :accounting_date => '2005-01-01' }
    #   ])
    #
    # == Overwriting default accessors
    #
    # All column values are automatically available through basic accessors on the Active Record object, but some times you
    # want to specialize this behavior. This can be done by either by overwriting the default accessors (using the same
    # name as the attribute) calling read_attribute(attr_name) and write_attribute(attr_name, value) to actually change things.
    # Example:
    #
    #   class Song < ActiveRecord::Base
    #     # Uses an integer of seconds to hold the length of the song
    #
    #     def length=(minutes)
    #       write_attribute(:length, minutes * 60)
    #     end
    #
    #     def length
    #       read_attribute(:length) / 60
    #     end
    #   end
    #
    # You can alternatively use self[:attribute]=(value) and self[:attribute] instead of write_attribute(:attribute, vaule) and
    # read_attribute(:attribute) as a shorter form.
    #
    # == Accessing attributes before they have been typecasted
    #
    # Sometimes you want to be able to read the raw attribute data without having the column-determined typecast run its course first.
    # That can be done by using the <attribute>_before_type_cast accessors that all attributes have. For example, if your Account model
    # has a balance attribute, you can call account.balance_before_type_cast or account.id_before_type_cast.
    #
    # This is especially useful in validation situations where the user might supply a string for an integer field and you want to display
    # the original string back in an error message. Accessing the attribute normally would typecast the string to 0, which isn't what you
    # want.
    #
    # == Dynamic attribute-based finders
    #
    # Dynamic attribute-based finders are a cleaner way of getting (and/or creating) objects by simple queries without turning to SQL. They work by
    # appending the name of an attribute to <tt>find_by_</tt> or <tt>find_all_by_</tt>, so you get finders like Person.find_by_user_name,
    # Person.find_all_by_last_name, Payment.find_by_transaction_id. So instead of writing
    # <tt>Person.find(:first, ["user_name = ?", user_name])</tt>, you just do <tt>Person.find_by_user_name(user_name)</tt>.
    # And instead of writing <tt>Person.find(:all, ["last_name = ?", last_name])</tt>, you just do <tt>Person.find_all_by_last_name(last_name)</tt>.
    #
    # It's also possible to use multiple attributes in the same find by separating them with "_and_", so you get finders like
    # <tt>Person.find_by_user_name_and_password</tt> or even <tt>Payment.find_by_purchaser_and_state_and_country</tt>. So instead of writing
    # <tt>Person.find(:first, ["user_name = ? AND password = ?", user_name, password])</tt>, you just do
    # <tt>Person.find_by_user_name_and_password(user_name, password)</tt>.
    #
    # It's even possible to use all the additional parameters to find. For example, the full interface for Payment.find_all_by_amount
    # is actually Payment.find_all_by_amount(amount, options). And the full interface to Person.find_by_user_name is
    # actually Person.find_by_user_name(user_name, options). So you could call <tt>Payment.find_all_by_amount(50, :order => "created_on")</tt>.
    #
    # The same dynamic finder style can be used to create the object if it doesn't already exist. This dynamic finder is called with
    # <tt>find_or_create_by_</tt> and will return the object if it already exists and otherwise creates it, then returns it. Example:
    #
    #   # No 'Summer' tag exists
    #   Tag.find_or_create_by_name("Summer") # equal to Tag.create(:name => "Summer")
    #   
    #   # Now the 'Summer' tag does exist
    #   Tag.find_or_create_by_name("Summer") # equal to Tag.find_by_name("Summer")
    #
    # == Saving arrays, hashes, and other non-mappable objects in text columns
    #
    # Active Record can serialize any object in text columns using YAML. To do so, you must specify this with a call to the class method +serialize+.
    # This makes it possible to store arrays, hashes, and other non-mappable objects without doing any additional work. Example:
    #
    #   class User < ActiveRecord::Base
    #     serialize :preferences
    #   end
    #
    #   user = User.create(:preferences) => { "background" => "black", "display" => large })
    #   User.find(user.id).preferences # => { "background" => "black", "display" => large }
    #
    # You can also specify a class option as the second parameter that'll raise an exception if a serialized object is retrieved as a
    # descendent of a class not in the hierarchy. Example:
    #
    #   class User < ActiveRecord::Base
    #     serialize :preferences, Hash
    #   end
    #
    #   user = User.create(:preferences => %w( one two three ))
    #   User.find(user.id).preferences    # raises SerializationTypeMismatch
    #
    # == Single table inheritance
    #
    # Active Record allows inheritance by storing the name of the class in a column that by default is called "type" (can be changed
    # by overwriting <tt>Base.inheritance_column</tt>). This means that an inheritance looking like this:
    #
    #   class Company < ActiveRecord::Base; end
    #   class Firm < Company; end
    #   class Client < Company; end
    #   class PriorityClient < Client; end
    #
    # When you do Firm.create(:name => "37signals"), this record will be saved in the companies table with type = "Firm". You can then
    # fetch this row again using Company.find(:first, "name = '37signals'") and it will return a Firm object.
    #
    # If you don't have a type column defined in your table, single-table inheritance won't be triggered. In that case, it'll work just
    # like normal subclasses with no special magic for differentiating between them or reloading the right type with find.
    #
    # Note, all the attributes for all the cases are kept in the same table. Read more:
    # http://www.martinfowler.com/eaaCatalog/singleTableInheritance.html
    #
    # == Connection to multiple databases in different models
    #
    # Connections are usually created through ActiveRecord::Base.establish_connection and retrieved by ActiveRecord::Base.connection.
    # All classes inheriting from ActiveRecord::Base will use this connection. But you can also set a class-specific connection.
    # For example, if Course is a ActiveRecord::Base, but resides in a different database you can just say Course.establish_connection
    # and Course *and all its subclasses* will use this connection instead.
    #
    # This feature is implemented by keeping a connection pool in ActiveRecord::Base that is a Hash indexed by the class. If a connection is
    # requested, the retrieve_connection method will go up the class-hierarchy until a connection is found in the connection pool.
    #
    # == Exceptions
    #
    # * +ActiveRecordError+ -- generic error class and superclass of all other errors raised by Active Record
    # * +AdapterNotSpecified+ -- the configuration hash used in <tt>establish_connection</tt> didn't include a
    #   <tt>:adapter</tt> key.
    # * +AdapterNotFound+ -- the <tt>:adapter</tt> key used in <tt>establish_connection</tt> specified an non-existent adapter
    #   (or a bad spelling of an existing one).
    # * +AssociationTypeMismatch+ -- the object assigned to the association wasn't of the type specified in the association definition.
    # * +SerializationTypeMismatch+ -- the object serialized wasn't of the class specified as the second parameter.
    # * +ConnectionNotEstablished+ -- no connection has been established. Use <tt>establish_connection</tt> before querying.
    # * +RecordNotFound+ -- no record responded to the find* method.
    #   Either the row with the given ID doesn't exist or the row didn't meet the additional restrictions.
    # * +StatementInvalid+ -- the database server rejected the SQL statement. The precise error is added in the  message.
    #   Either the record with the given ID doesn't exist or the record didn't meet the additional restrictions.
    # * +MultiparameterAssignmentErrors+ -- collection of errors that occurred during a mass assignment using the
    #   +attributes=+ method. The +errors+ property of this exception contains an array of +AttributeAssignmentError+
    #   objects that should be inspected to determine which attributes triggered the errors.
    # * +AttributeAssignmentError+ -- an error occurred while doing a mass assignment through the +attributes=+ method.
    #   You can inspect the +attribute+ property of the exception object to determine which attribute triggered the error.
    #
    # *Note*: The attributes listed are class-level attributes (accessible from both the class and instance level).
    # So it's possible to assign a logger to the class through Base.logger= which will then be used by all
    # instances in the current object space.

new_record: true

--- !ruby/object:RaClass 
attributes: 
  superclass: Object
  ra_comment_id: 28
  name: Base
  ra_library_id: 0
  type: RaClass
  id: 29
  parent_id: 8
  full_name: ActiveRecord::Base
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 30
  comment: ""
new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 31
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 263
        def self.reset_subclasses
          nonreloadables = []
          subclasses.each do |klass|
            unless klass.reloadable?
              nonreloadables << klass
              next
            end
            klass.instance_variables.each { |var| klass.send(:remove_instance_variable, var) }
            klass.instance_methods(false).each { |m| klass.send :undef_method, m }
          end
          @@subclasses = {}
          nonreloadables.each { |klass| (@@subclasses[klass.superclass] ||= []) << klass }
        end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: reset_subclasses
  visibility: 1
  ra_comment_id: 30
  file_id: 3
  ra_container_id: 29
  parameters: ()
  singleton: 1
  id: 32
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 31
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 33
  comment: |
    # Find operates with three different retrieval approaches:
    #
    # * Find by id: This can either be a specific id (1), a list of ids (1, 5, 6), or an array of ids ([5, 6, 10]).
    #   If no record can be found for all of the listed ids, then RecordNotFound will be raised.
    # * Find first: This will return the first record matched by the options used. These options can either be specific
    #   conditions or merely an order. If no record can matched, nil is returned.
    # * Find all: This will return all the records matched by the options used. If no records are found, an empty array is returned.
    #
    # All approaches accept an option hash as their last parameter. The options are:
    #
    # * <tt>:conditions</tt>: An SQL fragment like "administrator = 1" or [ "user_name = ?", username ]. See conditions in the intro.
    # * <tt>:order</tt>: An SQL fragment like "created_at DESC, name".
    # * <tt>:group</tt>: An attribute name by which the result should be grouped. Uses the GROUP BY SQL-clause.
    # * <tt>:limit</tt>: An integer determining the limit on the number of rows that should be returned.
    # * <tt>:offset</tt>: An integer determining the offset from where the rows should be fetched. So at 5, it would skip the first 4 rows.
    # * <tt>:joins</tt>: An SQL fragment for additional joins like "LEFT JOIN comments ON comments.post_id = id". (Rarely needed).
    #   The records will be returned read-only since they will have attributes that do not correspond to the table's columns.
    #   Pass :readonly => false to override.
    # * <tt>:include</tt>: Names associations that should be loaded alongside using LEFT OUTER JOINs. The symbols named refer
    #   to already defined associations. See eager loading under Associations.
    # * <tt>:select</tt>: By default, this is * as in SELECT * FROM, but can be changed if you for example want to do a join, but not
    #   include the joined columns.
    # * <tt>:readonly</tt>: Mark the returned records read-only so they cannot be saved or updated.
    #
    # Examples for find by id:
    #   Person.find(1)       # returns the object for ID = 1
    #   Person.find(1, 2, 6) # returns an array for objects with IDs in (1, 2, 6)
    #   Person.find([7, 17]) # returns an array for objects with IDs in (7, 17)
    #   Person.find([1])     # returns an array for objects the object with ID = 1
    #   Person.find(1, :conditions => "administrator = 1", :order => "created_on DESC")
    #
    # Examples for find first:
    #   Person.find(:first) # returns the first object fetched by SELECT * FROM people
    #   Person.find(:first, :conditions => [ "user_name = ?", user_name])
    #   Person.find(:first, :order => "created_on DESC", :offset => 5)
    #
    # Examples for find all:
    #   Person.find(:all) # returns an array of objects for all the rows fetched by SELECT * FROM people
    #   Person.find(:all, :conditions => [ "category IN (?)", categories], :limit => 50)
    #   Person.find(:all, :offset => 10, :limit => 10)
    #   Person.find(:all, :include => [ :account, :friends ])
    #   Person.find(:all, :group => "category")

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 34
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 381
          def find(*args)
            options = extract_options_from_args!(args)
    
            # Inherit :readonly from finder scope if set.  Otherwise,
            # if :joins is not blank then :readonly defaults to true.
            unless options.has_key?(:readonly)
              if scoped?(:find, :readonly)
                options[:readonly] = scope(:find, :readonly)
              elsif !options[:joins].blank?
                options[:readonly] = true
              end
            end
    
            case args.first
              when :first
                find(:all, options.merge(options[:include] ? { } : { :limit => 1 })).first
              when :all
                records = options[:include] ? find_with_associations(options) : find_by_sql(construct_finder_sql(options))
                records.each { |record| record.readonly! } if options[:readonly]
                records
              else
                return args.first if args.first.kind_of?(Array) && args.first.empty?
                expects_array = args.first.kind_of?(Array)
                
                conditions = " AND (#{sanitize_sql(options[:conditions])})" if options[:conditions]
    
                ids = args.flatten.compact.uniq
                case ids.size
                  when 0
                    raise RecordNotFound, "Couldn't find #{name} without an ID#{conditions}"
                  when 1
                    if result = find(:first, options.merge({ :conditions => "#{table_name}.#{primary_key} = #{sanitize(ids.first)}#{conditions}" }))
                      return expects_array ? [ result ] : result
                    else
                      raise RecordNotFound, "Couldn't find #{name} with ID=#{ids.first}#{conditions}"
                    end
                  else
                    # Find multiple ids
                    ids_list = ids.map { |id| sanitize(id) }.join(',')
                    result   = find(:all, options.merge({ :conditions => "#{table_name}.#{primary_key} IN (#{ids_list})#{conditions}"}))
                    if result.size == ids.size
                      return result
                    else
                      raise RecordNotFound, "Couldn't find all #{name.pluralize} with IDs (#{ids_list})#{conditions}"
                    end
                end
            end
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: find
  visibility: 1
  ra_comment_id: 33
  file_id: 3
  ra_container_id: 29
  parameters: (*args)
  singleton: 1
  id: 35
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 34
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 36
  comment: |
    # Works like find(:all), but requires a complete SQL string. Examples:
    #   Post.find_by_sql "SELECT p.*, c.author FROM posts p, comments c WHERE p.id = c.post_id"
    #   Post.find_by_sql ["SELECT * FROM posts WHERE author = ? AND created > ?", author_id, start_date]

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 37
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 433
          def find_by_sql(sql)
            connection.select_all(sanitize_sql(sql), "#{name} Load").collect! { |record| instantiate(record) }
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: find_by_sql
  visibility: 1
  ra_comment_id: 36
  file_id: 3
  ra_container_id: 29
  parameters: (sql)
  singleton: 1
  id: 38
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 37
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 39
  comment: |
    # Returns true if the given +id+ represents the primary key of a record in the database, false otherwise.
    # Example:
    #   Person.exists?(5)

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 40
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 440
          def exists?(id)
            !find(:first, :conditions => ["#{primary_key} = ?", id]).nil? rescue false
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: exists?
  visibility: 1
  ra_comment_id: 39
  file_id: 3
  ra_container_id: 29
  parameters: (id)
  singleton: 1
  id: 41
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 40
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 42
  comment: |
    # Creates an object, instantly saves it as a record (if the validation permits it), and returns it. If the save
    # fails under validations, the unsaved object is still returned.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 43
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 446
          def create(attributes = nil)
            if attributes.is_a?(Array)
              attributes.collect { |attr| create(attr) }
            else
              attributes.reverse_merge!(scope(:create)) if scoped?(:create)
    
              object = new(attributes)
              object.save
              object
            end
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: create
  visibility: 1
  ra_comment_id: 42
  file_id: 3
  ra_container_id: 29
  parameters: (attributes = nil)
  singleton: 1
  id: 44
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 43
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 45
  comment: |
    # Finds the record from the passed +id+, instantly saves it with the passed +attributes+ (if the validation permits it),
    # and returns it. If the save fails under validations, the unsaved object is still returned.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 46
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 460
          def update(id, attributes)
            if id.is_a?(Array)
              idx = -1
              id.collect { |id| idx += 1; update(id, attributes[idx]) }
            else
              object = find(id)
              object.update_attributes(attributes)
              object
            end
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: update
  visibility: 1
  ra_comment_id: 45
  file_id: 3
  ra_container_id: 29
  parameters: (id, attributes)
  singleton: 1
  id: 47
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 46
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 48
  comment: |
    # Deletes the record with the given +id+ without instantiating an object first. If an array of ids is provided, all of them
    # are deleted.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 49
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 473
          def delete(id)
            delete_all([ "#{primary_key} IN (?)", id ])
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: delete
  visibility: 1
  ra_comment_id: 48
  file_id: 3
  ra_container_id: 29
  parameters: (id)
  singleton: 1
  id: 50
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 49
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 51
  comment: |
    # Destroys the record with the given +id+ by instantiating the object and calling #destroy (all the callbacks are the triggered).
    # If an array of ids is provided, all of them are destroyed.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 52
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 479
          def destroy(id)
            id.is_a?(Array) ? id.each { |id| destroy(id) } : find(id).destroy
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: destroy
  visibility: 1
  ra_comment_id: 51
  file_id: 3
  ra_container_id: 29
  parameters: (id)
  singleton: 1
  id: 53
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 52
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 54
  comment: |
    # Updates all records with the SET-part of an SQL update statement in +updates+ and returns an integer with the number of rows updated.
    # A subset of the records can be selected by specifying +conditions+. Example:
    #   Billing.update_all "category = 'authorized', approved = 1", "author = 'David'"

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 55
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 486
          def update_all(updates, conditions = nil)
            sql  = "UPDATE #{table_name} SET #{sanitize_sql(updates)} "
            add_conditions!(sql, conditions)
            connection.update(sql, "#{name} Update")
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: update_all
  visibility: 1
  ra_comment_id: 54
  file_id: 3
  ra_container_id: 29
  parameters: (updates, conditions = nil)
  singleton: 1
  id: 56
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 55
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 57
  comment: |
    # Destroys the objects for all the records that match the +condition+ by instantiating each object and calling
    # the destroy method. Example:
    #   Person.destroy_all "last_login < '2004-04-04'"

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 58
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 495
          def destroy_all(conditions = nil)
            find(:all, :conditions => conditions).each { |object| object.destroy }
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: destroy_all
  visibility: 1
  ra_comment_id: 57
  file_id: 3
  ra_container_id: 29
  parameters: (conditions = nil)
  singleton: 1
  id: 59
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 58
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 60
  comment: |
    # Deletes all the records that match the +condition+ without instantiating the objects first (and hence not
    # calling the destroy method). Example:
    #   Post.delete_all "person_id = 5 AND (category = 'Something' OR category = 'Else')"

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 61
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 502
          def delete_all(conditions = nil)
            sql = "DELETE FROM #{table_name} "
            add_conditions!(sql, conditions)
            connection.delete(sql, "#{name} Delete all")
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: delete_all
  visibility: 1
  ra_comment_id: 60
  file_id: 3
  ra_container_id: 29
  parameters: (conditions = nil)
  singleton: 1
  id: 62
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 61
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 63
  comment: |
    # Returns the number of records that meet the +conditions+. Zero is returned if no records match. Example:
    #   Product.count "sales > 1"

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 64
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 510
          def count(conditions = nil, joins = nil)
            sql  = "SELECT COUNT(*) FROM #{table_name} "
            sql << " #{joins} " if joins
            add_conditions!(sql, conditions)
            count_by_sql(sql)
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: count
  visibility: 1
  ra_comment_id: 63
  file_id: 3
  ra_container_id: 29
  parameters: (conditions = nil, joins = nil)
  singleton: 1
  id: 65
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 64
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 66
  comment: |
    # Returns the result of an SQL statement that should only include a COUNT(*) in the SELECT part.
    #   Product.count_by_sql "SELECT COUNT(*) FROM sales s, customers c WHERE s.customer_id = c.id"

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 67
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 519
          def count_by_sql(sql)
            sql = sanitize_conditions(sql)
            connection.select_value(sql, "#{name} Count").to_i
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: count_by_sql
  visibility: 1
  ra_comment_id: 66
  file_id: 3
  ra_container_id: 29
  parameters: (sql)
  singleton: 1
  id: 68
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 67
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 69
  comment: |
    # Increments the specified counter by one. So <tt>DiscussionBoard.increment_counter("post_count",
    # discussion_board_id)</tt> would increment the "post_count" counter on the board responding to discussion_board_id.
    # This is used for caching aggregate values, so that they don't need to be computed every time. Especially important
    # for looping over a collection where each element require a number of aggregate values. Like the DiscussionBoard
    # that needs to list both the number of posts and comments.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 70
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 529
          def increment_counter(counter_name, id)
            update_all "#{counter_name} = #{counter_name} + 1", "#{primary_key} = #{quote(id)}"
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: increment_counter
  visibility: 1
  ra_comment_id: 69
  file_id: 3
  ra_container_id: 29
  parameters: (counter_name, id)
  singleton: 1
  id: 71
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 70
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 72
  comment: |
    # Works like increment_counter, but decrements instead.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 73
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 534
          def decrement_counter(counter_name, id)
            update_all "#{counter_name} = #{counter_name} - 1", "#{primary_key} = #{quote(id)}"
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: decrement_counter
  visibility: 1
  ra_comment_id: 72
  file_id: 3
  ra_container_id: 29
  parameters: (counter_name, id)
  singleton: 1
  id: 74
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 73
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 75
  comment: |
    # Attributes named in this macro are protected from mass-assignment, such as <tt>new(attributes)</tt> and
    # <tt>attributes=(attributes)</tt>. Their assignment will simply be ignored. Instead, you can use the direct writer
    # methods to do assignment. This is meant to protect sensitive attributes from being overwritten by URL/form hackers. Example:
    #
    #   class Customer < ActiveRecord::Base
    #     attr_protected :credit_rating
    #   end
    #
    #   customer = Customer.new("name" => David, "credit_rating" => "Excellent")
    #   customer.credit_rating # => nil
    #   customer.attributes = { "description" => "Jolly fellow", "credit_rating" => "Superb" }
    #   customer.credit_rating # => nil
    #
    #   customer.credit_rating = "Average"
    #   customer.credit_rating # => "Average"

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 76
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 553
          def attr_protected(*attributes)
            write_inheritable_array("attr_protected", attributes - (protected_attributes || []))
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: attr_protected
  visibility: 1
  ra_comment_id: 75
  file_id: 3
  ra_container_id: 29
  parameters: (*attributes)
  singleton: 1
  id: 77
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 76
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 78
  comment: |
    # If this macro is used, only those attributes named in it will be accessible for mass-assignment, such as
    # <tt>new(attributes)</tt> and <tt>attributes=(attributes)</tt>. This is the more conservative choice for mass-assignment
    # protection. If you'd rather start from an all-open default and restrict attributes as needed, have a look at
    # attr_protected.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 79
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 566
          def attr_accessible(*attributes)
            write_inheritable_array("attr_accessible", attributes - (accessible_attributes || []))
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: attr_accessible
  visibility: 1
  ra_comment_id: 78
  file_id: 3
  ra_container_id: 29
  parameters: (*attributes)
  singleton: 1
  id: 80
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 79
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 81
  comment: |
    # Specifies that the attribute by the name of +attr_name+ should be serialized before saving to the database and unserialized
    # after loading from the database. The serialization is done through YAML. If +class_name+ is specified, the serialized
    # object must be of that class on retrieval or +SerializationTypeMismatch+ will be raised.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 82
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 578
          def serialize(attr_name, class_name = Object)
            serialized_attributes[attr_name.to_s] = class_name
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: serialize
  visibility: 1
  ra_comment_id: 81
  file_id: 3
  ra_container_id: 29
  parameters: (attr_name, class_name = Object)
  singleton: 1
  id: 83
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 82
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 84
  comment: |
    # Returns a hash of all the attributes that have been specified for serialization as keys and their class restriction as values.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 85
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 583
          def serialized_attributes
            read_inheritable_attribute("attr_serialized") or write_inheritable_attribute("attr_serialized", {})
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: serialized_attributes
  visibility: 1
  ra_comment_id: 84
  file_id: 3
  ra_container_id: 29
  parameters: ()
  singleton: 1
  id: 86
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 85
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 87
  comment: |
    # Guesses the table name (in forced lower-case) based on the name of the class in the inheritance hierarchy descending
    # directly from ActiveRecord. So if the hierarchy looks like: Reply < Message < ActiveRecord, then Message is used
    # to guess the table name from even when called on Reply. The rules used to do the guess are handled by the Inflector class
    # in Active Support, which knows almost all common English inflections (report a bug if your inflection isn't covered).
    #
    # Additionally, the class-level table_name_prefix is prepended to the table_name and the table_name_suffix is appended.
    # So if you have "myapp_" as a prefix, the table name guess for an Account class becomes "myapp_accounts".
    #
    # You can also overwrite this class method to allow for unguessable links, such as a Mouse class with a link to a
    # "mice" table. Example:
    #
    #   class Mouse < ActiveRecord::Base
    #      set_table_name "mice"
    #   end

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 88
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 601
          def table_name
            reset_table_name
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: table_name
  visibility: 1
  ra_comment_id: 87
  file_id: 3
  ra_container_id: 29
  parameters: ()
  singleton: 1
  id: 89
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 88
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 90
  comment: ""
new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 91
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 605
          def reset_table_name
            name = "#{table_name_prefix}#{undecorated_table_name(class_name_of_active_record_descendant(self))}#{table_name_suffix}"
            set_table_name name
            name
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: reset_table_name
  visibility: 1
  ra_comment_id: 90
  file_id: 3
  ra_container_id: 29
  parameters: ()
  singleton: 1
  id: 92
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 91
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 93
  comment: |
    # Defines the primary key field -- can be overridden in subclasses. Overwriting will negate any effect of the
    # primary_key_prefix_type setting, though.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 94
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 613
          def primary_key
            reset_primary_key
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: primary_key
  visibility: 1
  ra_comment_id: 93
  file_id: 3
  ra_container_id: 29
  parameters: ()
  singleton: 1
  id: 95
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 94
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 96
  comment: ""
new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 97
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 617
          def reset_primary_key
            key = 'id'
            case primary_key_prefix_type
              when :table_name
                key = Inflector.foreign_key(class_name_of_active_record_descendant(self), false)
              when :table_name_with_underscore
                key = Inflector.foreign_key(class_name_of_active_record_descendant(self))
            end
            set_primary_key(key)
            key
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: reset_primary_key
  visibility: 1
  ra_comment_id: 96
  file_id: 3
  ra_container_id: 29
  parameters: ()
  singleton: 1
  id: 98
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 97
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 99
  comment: |
    # Defines the column name for use with single table inheritance -- can be overridden in subclasses.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 100
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 630
          def inheritance_column
            "type"
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: inheritance_column
  visibility: 1
  ra_comment_id: 99
  file_id: 3
  ra_container_id: 29
  parameters: ()
  singleton: 1
  id: 101
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 100
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 102
  comment: |
    # Lazy-set the sequence name to the connection's default.  This method
    # is only ever called once since set_sequence_name overrides it.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 103
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 636
          def sequence_name
            reset_sequence_name
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: sequence_name
  visibility: 1
  ra_comment_id: 102
  file_id: 3
  ra_container_id: 29
  parameters: ()
  singleton: 1
  id: 104
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 103
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 105
  comment: ""
new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 106
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 640
          def reset_sequence_name
            default = connection.default_sequence_name(table_name, primary_key)
            set_sequence_name(default)
            default
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: reset_sequence_name
  visibility: 1
  ra_comment_id: 105
  file_id: 3
  ra_container_id: 29
  parameters: ()
  singleton: 1
  id: 107
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 106
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 108
  comment: |
    # Sets the table name to use to the given value, or (if the value
    # is nil or false) to the value returned by the given block.
    #
    # Example:
    #
    #   class Project < ActiveRecord::Base
    #     set_table_name "project"
    #   end

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 109
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 654
          def set_table_name( value=nil, &block )
            define_attr_method :table_name, value, &block
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: set_table_name
  visibility: 1
  ra_comment_id: 108
  file_id: 3
  ra_container_id: 29
  parameters: ( value=nil, &block )
  singleton: 1
  id: 110
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 109
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 111
  comment: |
    # Sets the name of the primary key column to use to the given value,
    # or (if the value is nil or false) to the value returned by the given
    # block.
    #
    # Example:
    #
    #   class Project < ActiveRecord::Base
    #     set_primary_key "sysid"
    #   end

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 112
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 668
          def set_primary_key( value=nil, &block )
            define_attr_method :primary_key, value, &block
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: set_primary_key
  visibility: 1
  ra_comment_id: 111
  file_id: 3
  ra_container_id: 29
  parameters: ( value=nil, &block )
  singleton: 1
  id: 113
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 112
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 114
  comment: |
    # Sets the name of the inheritance column to use to the given value,
    # or (if the value # is nil or false) to the value returned by the
    # given block.
    #
    # Example:
    #
    #   class Project < ActiveRecord::Base
    #     set_inheritance_column do
    #       original_inheritance_column + "_id"
    #     end
    #   end

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 115
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 684
          def set_inheritance_column( value=nil, &block )
            define_attr_method :inheritance_column, value, &block
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: set_inheritance_column
  visibility: 1
  ra_comment_id: 114
  file_id: 3
  ra_container_id: 29
  parameters: ( value=nil, &block )
  singleton: 1
  id: 116
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 115
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 117
  comment: |
    # Sets the name of the sequence to use when generating ids to the given
    # value, or (if the value is nil or false) to the value returned by the
    # given block. This is required for Oracle and is useful for any
    # database which relies on sequences for primary key generation.
    #
    # If a sequence name is not explicitly set when using Oracle or Firebird,
    # it will default to the commonly used pattern of: #{table_name}_seq
    #
    # If a sequence name is not explicitly set when using PostgreSQL, it
    # will discover the sequence corresponding to your primary key for you.
    #
    # Example:
    #
    #   class Project < ActiveRecord::Base
    #     set_sequence_name "projectseq"   # default would have been "project_seq"
    #   end

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 118
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 705
          def set_sequence_name( value=nil, &block )
            define_attr_method :sequence_name, value, &block
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: set_sequence_name
  visibility: 1
  ra_comment_id: 117
  file_id: 3
  ra_container_id: 29
  parameters: ( value=nil, &block )
  singleton: 1
  id: 119
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 118
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 120
  comment: |
    # Indicates whether the table associated with this class exists

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 121
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 719
          def table_exists?
            if connection.respond_to?(:tables)
              connection.tables.include? table_name
            else
              # if the connection adapter hasn't implemented tables, there are two crude tests that can be
              # used - see if getting column info raises an error, or if the number of columns returned is zero
              begin
                reset_column_information
                columns.size > 0
              rescue ActiveRecord::StatementInvalid
                false
              end          
            end
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: table_exists?
  visibility: 1
  ra_comment_id: 120
  file_id: 3
  ra_container_id: 29
  parameters: ()
  singleton: 1
  id: 122
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 121
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 123
  comment: |
    # Returns an array of column objects for the table associated with this class.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 124
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 735
          def columns
            unless @columns
              @columns = connection.columns(table_name, "#{name} Columns")
              @columns.each {|column| column.primary = column.name == primary_key}
            end
            @columns
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: columns
  visibility: 1
  ra_comment_id: 123
  file_id: 3
  ra_container_id: 29
  parameters: ()
  singleton: 1
  id: 125
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 124
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 126
  comment: |
    # Returns an array of column objects for the table associated with this class.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 127
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 744
          def columns_hash
            @columns_hash ||= columns.inject({}) { |hash, column| hash[column.name] = column; hash }
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: columns_hash
  visibility: 1
  ra_comment_id: 126
  file_id: 3
  ra_container_id: 29
  parameters: ()
  singleton: 1
  id: 128
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 127
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 129
  comment: ""
new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 130
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 748
          def column_names
            @column_names ||= columns.map { |column| column.name }
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: column_names
  visibility: 1
  ra_comment_id: 129
  file_id: 3
  ra_container_id: 29
  parameters: ()
  singleton: 1
  id: 131
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 130
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 132
  comment: |
    # Returns an array of column objects where the primary id, all columns ending in "_id" or "_count",
    # and columns used for single table inheritance have been removed.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 133
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 754
          def content_columns
            @content_columns ||= columns.reject { |c| c.primary || c.name =~ /(_id|_count)$/ || c.name == inheritance_column }
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: content_columns
  visibility: 1
  ra_comment_id: 132
  file_id: 3
  ra_container_id: 29
  parameters: ()
  singleton: 1
  id: 134
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 133
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 135
  comment: |
    # Returns a hash of all the methods added to query each of the columns in the table with the name of the method as the key
    # and true as the value. This makes it possible to do O(1) lookups in respond_to? to check if a given method for attribute
    # is available.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 136
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 761
          def column_methods_hash
            @dynamic_methods_hash ||= column_names.inject(Hash.new(false)) do |methods, attr|
              attr_name = attr.to_s
              methods[attr.to_sym]       = attr_name
              methods["#{attr}=".to_sym] = attr_name
              methods["#{attr}?".to_sym] = attr_name
              methods["#{attr}_before_type_cast".to_sym] = attr_name
              methods
            end
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: column_methods_hash
  visibility: 1
  ra_comment_id: 135
  file_id: 3
  ra_container_id: 29
  parameters: ()
  singleton: 1
  id: 137
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 136
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 138
  comment: |
    # Contains the names of the generated reader methods.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 139
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 773
          def read_methods
            @read_methods ||= Set.new
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: read_methods
  visibility: 1
  ra_comment_id: 138
  file_id: 3
  ra_container_id: 29
  parameters: ()
  singleton: 1
  id: 140
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 139
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 141
  comment: |
    # Resets all the cached information about columns, which will cause them to be reloaded on the next request.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 142
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 778
          def reset_column_information
            read_methods.each { |name| undef_method(name) }
            @column_names = @columns = @columns_hash = @content_columns = @dynamic_methods_hash = @read_methods = nil
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: reset_column_information
  visibility: 1
  ra_comment_id: 141
  file_id: 3
  ra_container_id: 29
  parameters: ()
  singleton: 1
  id: 143
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 142
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 144
  comment: |
    # Log and benchmark multiple statements in a single block. Example:
    #
    #   Project.benchmark("Creating project") do
    #     project = Project.create("name" => "stuff")
    #     project.create_manager("name" => "David")
    #     project.milestones << Milestone.find(:all)
    #   end
    #
    # The benchmark is only recorded if the current level of the logger matches the <tt>log_level</tt>, which makes it
    # easy to include benchmarking statements in production software that will remain inexpensive because the benchmark
    # will only be conducted if the log level is low enough.
    #
    # The logging of the multiple statements is turned off unless <tt>use_silence</tt> is set to false.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 145
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 820
          def benchmark(title, log_level = Logger::DEBUG, use_silence = true)
            if logger && logger.level == log_level
              result = nil
              seconds = Benchmark.realtime { result = use_silence ? silence { yield } : yield }
              logger.add(log_level, "#{title} (#{'%.5f' % seconds})")
              result
            else
              yield
            end
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: benchmark
  visibility: 1
  ra_comment_id: 144
  file_id: 3
  ra_container_id: 29
  parameters: (title, log_level = Logger::DEBUG, use_silence = true)
  singleton: 1
  id: 146
  block_parameters: ""
  force_documentation: 0
  ra_source_code_id: 145
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 147
  comment: |
    # Silences the logger for the duration of the block.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 148
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 832
          def silence
            old_logger_level, logger.level = logger.level, Logger::ERROR if logger
            yield
          ensure
            logger.level = old_logger_level if logger
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: silence
  visibility: 1
  ra_comment_id: 147
  file_id: 3
  ra_container_id: 29
  parameters: ()
  singleton: 1
  id: 149
  block_parameters: ""
  force_documentation: 0
  ra_source_code_id: 148
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 150
  comment: |
    # Scope parameters to method calls within the block.  Takes a hash of method_name => parameters hash.
    # method_name may be :find or :create.
    # :find parameters may include the <tt>:conditions</tt>, <tt>:joins</tt>,
    # <tt>:offset</tt>, <tt>:limit</tt>, and <tt>:readonly</tt> options.
    # :create parameters are an attributes hash.
    #
    #   Article.with_scope(:find => { :conditions => "blog_id = 1" }, :create => { :blog_id => 1 }) do
    #     Article.find(1) # => SELECT * from articles WHERE blog_id = 1 AND id = 1
    #     a = Article.create(1)
    #     a.blog_id == 1
    #   end

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 151
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 850
          def with_scope(method_scoping = {})
            # Dup first and second level of hash (method and params).
            method_scoping = method_scoping.inject({}) do |hash, (method, params)|
              hash[method] = params.dup
              hash
            end
    
            method_scoping.assert_valid_keys [:find, :create]
            if f = method_scoping[:find]
              f.assert_valid_keys [:conditions, :joins, :offset, :limit, :readonly]
              f[:readonly] = true if !f[:joins].blank? && !f.has_key?(:readonly)
            end
    
            raise ArgumentError, "Nested scopes are not yet supported: #{scoped_methods.inspect}" unless scoped_methods.nil?
    
            self.scoped_methods = method_scoping
            yield
          ensure 
            self.scoped_methods = nil
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: with_scope
  visibility: 1
  ra_comment_id: 150
  file_id: 3
  ra_container_id: 29
  parameters: (method_scoping = {})
  singleton: 1
  id: 152
  block_parameters: ""
  force_documentation: 0
  ra_source_code_id: 151
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 153
  comment: |
    # Overwrite the default class equality method to provide support for association proxies.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 154
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 872
          def ===(object)
            object.is_a?(self)
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: ===
  visibility: 1
  ra_comment_id: 153
  file_id: 3
  ra_container_id: 29
  parameters: (object)
  singleton: 1
  id: 155
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 154
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 156
  comment: |
    # Deprecated 

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 157
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 877
          def threaded_connections
            allow_concurrency
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: threaded_connections
  visibility: 1
  ra_comment_id: 156
  file_id: 3
  ra_container_id: 29
  parameters: ()
  singleton: 1
  id: 158
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 157
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 159
  comment: |
    # Deprecated 

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 160
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 882
          def threaded_connections=(value)
            self.allow_concurrency = value
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: threaded_connections=
  visibility: 1
  ra_comment_id: 159
  file_id: 3
  ra_container_id: 29
  parameters: (value)
  singleton: 1
  id: 161
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 160
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 162
  comment: |
    # Finder methods must instantiate through this method to work with the single-table inheritance model
    # that makes it possible to create objects of different types from the same table.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 163
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 890
            def instantiate(record)
              object = 
                if subclass_name = record[inheritance_column]
                  if subclass_name.empty?
                    allocate
                  else
                    require_association_class(subclass_name)
                    begin
                      compute_type(subclass_name).allocate
                    rescue NameError
                      raise SubclassNotFound,
                        "The single-table inheritance mechanism failed to locate the subclass: '#{record[inheritance_column]}'. " +
                        "This error is raised because the column '#{inheritance_column}' is reserved for storing the class in case of inheritance. " +
                        "Please rename this column if you didn't intend it to be used for storing the inheritance class " +
                        "or overwrite #{self.to_s}.inheritance_column to use another column for that information."
                    end
                  end
                else
                  allocate
                end
    
              object.instance_variable_set("@attributes", record)
              object
            end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: instantiate
  visibility: 2
  ra_comment_id: 162
  file_id: 3
  ra_container_id: 29
  parameters: (record)
  singleton: 1
  id: 164
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 163
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 165
  comment: |
    # Returns the name of the type of the record using the current module as a prefix. So descendents of
    # MyApp::Business::Account would appear as "MyApp::Business::AccountSubclass".

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 166
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 917
            def type_name_with_module(type_name)
              self.name =~ /::/ ? self.name.scan(/(.*)::/).first.first + "::" + type_name : type_name
            end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: type_name_with_module
  visibility: 2
  ra_comment_id: 165
  file_id: 3
  ra_container_id: 29
  parameters: (type_name)
  singleton: 1
  id: 167
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 166
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 168
  comment: ""
new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 169
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 921
            def construct_finder_sql(options)
              sql  = "SELECT #{options[:select] || '*'} FROM #{table_name} "
              add_joins!(sql, options)
              add_conditions!(sql, options[:conditions])
              sql << " GROUP BY #{options[:group]} " if options[:group]
              sql << " ORDER BY #{options[:order]} " if options[:order]
              add_limit!(sql, options)
              sql
            end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: construct_finder_sql
  visibility: 2
  ra_comment_id: 168
  file_id: 3
  ra_container_id: 29
  parameters: (options)
  singleton: 1
  id: 170
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 169
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 171
  comment: ""
new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 172
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 931
            def add_limit!(sql, options)
              options[:limit]  ||= scope(:find, :limit)
              options[:offset] ||= scope(:find, :offset)
              connection.add_limit_offset!(sql, options)
            end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: add_limit!
  visibility: 2
  ra_comment_id: 171
  file_id: 3
  ra_container_id: 29
  parameters: (sql, options)
  singleton: 1
  id: 173
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 172
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 174
  comment: ""
new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 175
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 937
            def add_joins!(sql, options)
              join = scope(:find, :joins) || options[:joins]
              sql << " #{join} " if join
            end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: add_joins!
  visibility: 2
  ra_comment_id: 174
  file_id: 3
  ra_container_id: 29
  parameters: (sql, options)
  singleton: 1
  id: 176
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 175
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 177
  comment: |
    # Adds a sanitized version of +conditions+ to the +sql+ string. Note that the passed-in +sql+ string is changed.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 178
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 943
            def add_conditions!(sql, conditions)          
              segments = [scope(:find, :conditions)]
              segments << sanitize_sql(conditions) unless conditions.nil?
              segments << type_condition unless descends_from_active_record?        
              segments.compact!
              sql << "WHERE (#{segments.join(") AND (")}) " unless segments.empty?
            end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: add_conditions!
  visibility: 2
  ra_comment_id: 177
  file_id: 3
  ra_container_id: 29
  parameters: (sql, conditions)
  singleton: 1
  id: 179
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 178
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 180
  comment: ""
new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 181
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 951
            def type_condition
              quoted_inheritance_column = connection.quote_column_name(inheritance_column)
              type_condition = subclasses.inject("#{table_name}.#{quoted_inheritance_column} = '#{name.demodulize}' ") do |condition, subclass|
                condition << "OR #{table_name}.#{quoted_inheritance_column} = '#{subclass.name.demodulize}' "
              end
    
              " (#{type_condition}) "
            end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: type_condition
  visibility: 2
  ra_comment_id: 180
  file_id: 3
  ra_container_id: 29
  parameters: ()
  singleton: 1
  id: 182
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 181
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 183
  comment: |
    # Guesses the table name, but does not decorate it with prefix and suffix information.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 184
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 961
            def undecorated_table_name(class_name = class_name_of_active_record_descendant(self))
              table_name = Inflector.underscore(Inflector.demodulize(class_name))
              table_name = Inflector.pluralize(table_name) if pluralize_table_names
              table_name
            end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: undecorated_table_name
  visibility: 2
  ra_comment_id: 183
  file_id: 3
  ra_container_id: 29
  parameters: (class_name = class_name_of_active_record_descendant(self))
  singleton: 1
  id: 185
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 184
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 186
  comment: |
    # Enables dynamic finders like find_by_user_name(user_name) and find_by_user_name_and_password(user_name, password) that are turned into
    # find(:first, :conditions => ["user_name = ?", user_name]) and  find(:first, :conditions => ["user_name = ? AND password = ?", user_name, password])
    # respectively. Also works for find(:all), but using find_all_by_amount(50) that are turned into find(:all, :conditions => ["amount = ?", 50]).
    #
    # It's even possible to use all the additional parameters to find. For example, the full interface for find_all_by_amount
    # is actually find_all_by_amount(amount, options).

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 187
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 973
            def method_missing(method_id, *arguments)
              if match = /find_(all_by|by)_([_a-zA-Z]\w*)/.match(method_id.to_s)
                finder = determine_finder(match)
    
                attribute_names = extract_attribute_names_from_match(match)
                super unless all_attributes_exists?(attribute_names)
    
                conditions = construct_conditions_from_arguments(attribute_names, arguments)
    
                if arguments[attribute_names.length].is_a?(Hash)
                  find(finder, { :conditions => conditions }.update(arguments[attribute_names.length]))
                else
                  send("find_#{finder}", conditions, *arguments[attribute_names.length..-1]) # deprecated API
                end
              elsif match = /find_or_create_by_([_a-zA-Z]\w*)/.match(method_id.to_s)
                attribute_names = extract_attribute_names_from_match(match)
                super unless all_attributes_exists?(attribute_names)
    
                find(:first, :conditions => construct_conditions_from_arguments(attribute_names, arguments)) || 
                  create(construct_attributes_from_arguments(attribute_names, arguments))
              else
                super
              end
            end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: method_missing
  visibility: 2
  ra_comment_id: 186
  file_id: 3
  ra_container_id: 29
  parameters: (method_id, *arguments)
  singleton: 1
  id: 188
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 187
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 189
  comment: ""
new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 190
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 998
            def determine_finder(match)
              match.captures.first == 'all_by' ? :all : :first
            end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: determine_finder
  visibility: 2
  ra_comment_id: 189
  file_id: 3
  ra_container_id: 29
  parameters: (match)
  singleton: 1
  id: 191
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 190
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 192
  comment: ""
new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 193
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1002
            def extract_attribute_names_from_match(match)
              match.captures.last.split('_and_')
            end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: extract_attribute_names_from_match
  visibility: 2
  ra_comment_id: 192
  file_id: 3
  ra_container_id: 29
  parameters: (match)
  singleton: 1
  id: 194
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 193
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 195
  comment: ""
new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 196
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1006
            def construct_conditions_from_arguments(attribute_names, arguments)
              conditions = []
              attribute_names.each_with_index { |name, idx| conditions << "#{table_name}.#{connection.quote_column_name(name)} #{attribute_condition(arguments[idx])} " }
              [ conditions.join(" AND "), *arguments[0...attribute_names.length] ]
            end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: construct_conditions_from_arguments
  visibility: 2
  ra_comment_id: 195
  file_id: 3
  ra_container_id: 29
  parameters: (attribute_names, arguments)
  singleton: 1
  id: 197
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 196
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 198
  comment: ""
new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 199
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1012
            def construct_attributes_from_arguments(attribute_names, arguments)
              attributes = {}
              attribute_names.each_with_index { |name, idx| attributes[name] = arguments[idx] }
              attributes
            end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: construct_attributes_from_arguments
  visibility: 2
  ra_comment_id: 198
  file_id: 3
  ra_container_id: 29
  parameters: (attribute_names, arguments)
  singleton: 1
  id: 200
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 199
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 201
  comment: ""
new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 202
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1018
            def all_attributes_exists?(attribute_names)
              attribute_names.all? { |name| column_methods_hash.include?(name.to_sym) }
            end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: all_attributes_exists?
  visibility: 2
  ra_comment_id: 201
  file_id: 3
  ra_container_id: 29
  parameters: (attribute_names)
  singleton: 1
  id: 203
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 202
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 204
  comment: ""
new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 205
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1022
            def attribute_condition(argument)
              case argument
                when nil   then "IS ?"
                when Array then "IN (?)"
                else            "= ?"
              end
            end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: attribute_condition
  visibility: 2
  ra_comment_id: 204
  file_id: 3
  ra_container_id: 29
  parameters: (argument)
  singleton: 1
  id: 206
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 205
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 207
  comment: |
    # Defines an "attribute" method (like #inheritance_column or
    # #table_name). A new (class) method will be created with the
    # given name. If a value is specified, the new method will
    # return that value (as a string). Otherwise, the given block
    # will be used to compute the value of the method.
    #
    # The original method will be aliased, with the new name being
    # prefixed with "original_". This allows the new method to
    # access the original value.
    #
    # Example:
    #
    #   class A < ActiveRecord::Base
    #     define_attr_method :primary_key, "sysid"
    #     define_attr_method( :inheritance_column ) do
    #       original_inheritance_column + "_id"
    #     end
    #   end

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 208
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1048
            def define_attr_method(name, value=nil, &block)
              sing = class << self; self; end
              sing.send :alias_method, "original_#{name}", name
              if block_given?
                sing.send :define_method, name, &block
              else
                # use eval instead of a block to work around a memory leak in dev
                # mode in fcgi
                sing.class_eval "def #{name}; #{value.to_s.inspect}; end"
              end
            end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: define_attr_method
  visibility: 2
  ra_comment_id: 207
  file_id: 3
  ra_container_id: 29
  parameters: (name, value=nil, &block)
  singleton: 1
  id: 209
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 208
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 210
  comment: ""
new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 211
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1061
            def subclasses
              @@subclasses[self] ||= []
              @@subclasses[self] + extra = @@subclasses[self].inject([]) {|list, subclass| list + subclass.subclasses }
            end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: subclasses
  visibility: 3
  ra_comment_id: 210
  file_id: 3
  ra_container_id: 29
  parameters: ()
  singleton: 1
  id: 212
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 211
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 213
  comment: |
    # Test whether the given method and optional key are scoped.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 214
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1067
            def scoped?(method, key = nil)
              scoped_methods and scoped_methods.has_key?(method) and (key.nil? or scope(method).has_key?(key))
            end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: scoped?
  visibility: 3
  ra_comment_id: 213
  file_id: 3
  ra_container_id: 29
  parameters: (method, key = nil)
  singleton: 1
  id: 215
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 214
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 216
  comment: |
    # Retrieve the scope for the given method and optional key.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 217
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1072
            def scope(method, key = nil)
              if scoped_methods and scope = scoped_methods[method]
                key ? scope[key] : scope
              end
            end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: scope
  visibility: 3
  ra_comment_id: 216
  file_id: 3
  ra_container_id: 29
  parameters: (method, key = nil)
  singleton: 1
  id: 218
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 217
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 219
  comment: ""
new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 220
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1078
            def scoped_methods
              if allow_concurrency
                Thread.current[:scoped_methods] ||= {}
                Thread.current[:scoped_methods][self] ||= nil
              else
                @scoped_methods ||= nil
              end
            end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: scoped_methods
  visibility: 3
  ra_comment_id: 219
  file_id: 3
  ra_container_id: 29
  parameters: ()
  singleton: 1
  id: 221
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 220
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 222
  comment: ""
new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 223
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1087
            def scoped_methods=(value)
              if allow_concurrency
                Thread.current[:scoped_methods] ||= {}
                Thread.current[:scoped_methods][self] = value
              else
                @scoped_methods = value
              end
            end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: scoped_methods=
  visibility: 3
  ra_comment_id: 222
  file_id: 3
  ra_container_id: 29
  parameters: (value)
  singleton: 1
  id: 224
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 223
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 225
  comment: |
    # Returns the class type of the record using the current module as a prefix. So descendents of
    # MyApp::Business::Account would appear as MyApp::Business::AccountSubclass.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 226
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1098
            def compute_type(type_name)
              type_name_with_module(type_name).split("::").inject(Object) do |final_type, part|
                final_type.const_get(part)
              end
            end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: compute_type
  visibility: 3
  ra_comment_id: 225
  file_id: 3
  ra_container_id: 29
  parameters: (type_name)
  singleton: 1
  id: 227
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 226
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 228
  comment: |
    # Returns the name of the class descending directly from ActiveRecord in the inheritance hierarchy.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 229
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1105
            def class_name_of_active_record_descendant(klass)
              if klass.superclass == Base
                klass.name
              elsif klass.superclass.nil?
                raise ActiveRecordError, "#{name} doesn't belong in a hierarchy descending from ActiveRecord"
              else
                class_name_of_active_record_descendant(klass.superclass)
              end
            end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: class_name_of_active_record_descendant
  visibility: 3
  ra_comment_id: 228
  file_id: 3
  ra_container_id: 29
  parameters: (klass)
  singleton: 1
  id: 230
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 229
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 231
  comment: |
    # Accepts an array or string.  The string is returned untouched, but the array has each value
    # sanitized and interpolated into the sql statement.
    #   ["name='%s' and group_id='%s'", "foo'bar", 4]  returns  "name='foo''bar' and group_id='4'"

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 232
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1118
            def sanitize_sql(ary)
              return ary unless ary.is_a?(Array)
    
              statement, *values = ary
              if values.first.is_a?(Hash) and statement =~ /:\w+/
                replace_named_bind_variables(statement, values.first)
              elsif statement.include?('?')
                replace_bind_variables(statement, values)
              else
                statement % values.collect { |value| connection.quote_string(value.to_s) }
              end
            end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: sanitize_sql
  visibility: 3
  ra_comment_id: 231
  file_id: 3
  ra_container_id: 29
  parameters: (ary)
  singleton: 1
  id: 233
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 232
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 234
  comment: ""
new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 235
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1133
            def replace_bind_variables(statement, values)
              raise_if_bind_arity_mismatch(statement, statement.count('?'), values.size)
              bound = values.dup
              statement.gsub('?') { quote_bound_value(bound.shift) }
            end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: replace_bind_variables
  visibility: 3
  ra_comment_id: 234
  file_id: 3
  ra_container_id: 29
  parameters: (statement, values)
  singleton: 1
  id: 236
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 235
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 237
  comment: ""
new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 238
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1139
            def replace_named_bind_variables(statement, bind_vars)
              raise_if_bind_arity_mismatch(statement, statement.scan(/:(\w+)/).uniq.size, bind_vars.size)
              statement.gsub(/:(\w+)/) do
                match = $1.to_sym
                if bind_vars.include?(match)
                  quote_bound_value(bind_vars[match])
                else
                  raise PreparedStatementInvalid, "missing value for :#{match} in #{statement}"
                end
              end
            end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: replace_named_bind_variables
  visibility: 3
  ra_comment_id: 237
  file_id: 3
  ra_container_id: 29
  parameters: (statement, bind_vars)
  singleton: 1
  id: 239
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 238
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 240
  comment: ""
new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 241
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1151
            def quote_bound_value(value)
              if (value.respond_to?(:map) && !value.is_a?(String))
                value.map { |v| connection.quote(v) }.join(',')
              else
                connection.quote(value)
              end
            end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: quote_bound_value
  visibility: 3
  ra_comment_id: 240
  file_id: 3
  ra_container_id: 29
  parameters: (value)
  singleton: 1
  id: 242
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 241
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 243
  comment: ""
new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 244
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1159
            def raise_if_bind_arity_mismatch(statement, expected, provided)
              unless expected == provided
                raise PreparedStatementInvalid, "wrong number of bind variables (#{provided} for #{expected}) in: #{statement}"
              end
            end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: raise_if_bind_arity_mismatch
  visibility: 3
  ra_comment_id: 243
  file_id: 3
  ra_container_id: 29
  parameters: (statement, expected, provided)
  singleton: 1
  id: 245
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 244
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 246
  comment: ""
new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 247
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1165
            def extract_options_from_args!(args)
              options = args.last.is_a?(Hash) ? args.pop : {}
              validate_find_options(options)
              options
            end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: extract_options_from_args!
  visibility: 3
  ra_comment_id: 246
  file_id: 3
  ra_container_id: 29
  parameters: (args)
  singleton: 1
  id: 248
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 247
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 249
  comment: ""
new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 250
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1171
            def validate_find_options(options)
              options.assert_valid_keys [:conditions, :include, :joins, :limit, :offset, :order, :select, :readonly, :group]
            end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: validate_find_options
  visibility: 3
  ra_comment_id: 249
  file_id: 3
  ra_container_id: 29
  parameters: (options)
  singleton: 1
  id: 251
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 250
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 252
  comment: ""
new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 253
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1175
            def encode_quoted_value(value)
              quoted_value = connection.quote(value)
              quoted_value = "'#{quoted_value[1..-2].gsub(/\'/, "\\\\'")}'" if quoted_value.include?("\\\'") # (for ruby mode) " 
              quoted_value 
            end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: encode_quoted_value
  visibility: 3
  ra_comment_id: 252
  file_id: 3
  ra_container_id: 29
  parameters: (value)
  singleton: 1
  id: 254
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 253
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 255
  comment: |
    # New objects can be instantiated as either empty (pass no construction parameter) or pre-set with
    # attributes but not yet saved (pass a hash with key names matching the associated table column names).
    # In both instances, valid attribute keys are determined by the column names of the associated table --
    # hence you can't have attributes that aren't part of the table columns.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 256
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1187
          def initialize(attributes = nil)
            @attributes = attributes_from_column_definition
            @new_record = true
            ensure_proper_type
            self.attributes = attributes unless attributes.nil?
            yield self if block_given?
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: new
  visibility: 1
  ra_comment_id: 255
  file_id: 3
  ra_container_id: 29
  parameters: (attributes = nil)
  singleton: 1
  id: 257
  block_parameters: self if block_given?
  force_documentation: 0
  ra_source_code_id: 256
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 258
  comment: |
    # A model instance's primary key is always available as model.id
    # whether you name it the default 'id' or set it to something else.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 259
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1197
          def id
            attr_name = self.class.primary_key
            column = column_for_attribute(attr_name)
            define_read_method(:id, attr_name, column) if self.class.generate_read_methods
            read_attribute(attr_name)
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: id
  visibility: 1
  ra_comment_id: 258
  file_id: 3
  ra_container_id: 29
  parameters: ()
  singleton: 0
  id: 260
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 259
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 261
  comment: "Alias for #id"
new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 262
  source_code: ""
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: to_param
  visibility: 1
  ra_comment_id: 261
  file_id: 3
  ra_container_id: 29
  parameters: ()
  singleton: 0
  id: 263
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 262
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 264
  comment: |
    # Sets the primary ID.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 265
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1216
          def id=(value)
            write_attribute(self.class.primary_key, value)
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: id=
  visibility: 1
  ra_comment_id: 264
  file_id: 3
  ra_container_id: 29
  parameters: (value)
  singleton: 0
  id: 266
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 265
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 267
  comment: |
    # Returns true if this object hasn't been saved yet -- that is, a record for the object doesn't exist yet.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 268
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1221
          def new_record?
            @new_record
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: new_record?
  visibility: 1
  ra_comment_id: 267
  file_id: 3
  ra_container_id: 29
  parameters: ()
  singleton: 0
  id: 269
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 268
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 270
  comment: |
    # * No record exists: Creates a new record with values matching those of the object attributes.
    # * A record does exist: Updates the record with values matching those of the object attributes.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 271
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1227
          def save
            raise ActiveRecord::ReadOnlyRecord if readonly?
            create_or_update
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: save
  visibility: 1
  ra_comment_id: 270
  file_id: 3
  ra_container_id: 29
  parameters: ()
  singleton: 0
  id: 272
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 271
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 273
  comment: |
    # Deletes the record in the database and freezes this instance to reflect that no changes should
    # be made (since they can't be persisted).

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 274
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1234
          def destroy
            unless new_record?
              connection.delete "DELETE FROM \#{self.class.table_name}\nWHERE \#{self.class.primary_key} = \#{quoted_id}\n", "#{self.class.name} Destroy"
            end
    
            freeze
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: destroy
  visibility: 1
  ra_comment_id: 273
  file_id: 3
  ra_container_id: 29
  parameters: ()
  singleton: 0
  id: 275
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 274
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 276
  comment: |
    # Returns a clone of the record that hasn't been assigned an id yet and
    # is treated as a new record.  Note that this is a "shallow" clone:
    # it copies the object's attributes only, not its associations.
    # The extent of a "deep" clone is application-specific and is therefore
    # left to the application to implement according to its need.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 277
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1251
          def clone
            attrs = self.attributes_before_type_cast
            attrs.delete(self.class.primary_key)
            self.class.new do |record|
              record.send :instance_variable_set, '@attributes', attrs
            end
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: clone
  visibility: 1
  ra_comment_id: 276
  file_id: 3
  ra_container_id: 29
  parameters: ()
  singleton: 0
  id: 278
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 277
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 279
  comment: |
    # Updates a single attribute and saves the record. This is especially useful for boolean flags on existing records.
    # Note: This method is overwritten by the Validation module that'll make sure that updates made with this method
    # doesn't get subjected to validation checks. Hence, attributes can be updated even if the full object isn't valid.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 280
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1262
          def update_attribute(name, value)
            send(name.to_s + '=', value)
            save
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: update_attribute
  visibility: 1
  ra_comment_id: 279
  file_id: 3
  ra_container_id: 29
  parameters: (name, value)
  singleton: 0
  id: 281
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 280
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 282
  comment: |
    # Updates all the attributes from the passed-in Hash and saves the record. If the object is invalid, the saving will
    # fail and false will be returned.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 283
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1269
          def update_attributes(attributes)
            self.attributes = attributes
            save
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: update_attributes
  visibility: 1
  ra_comment_id: 282
  file_id: 3
  ra_container_id: 29
  parameters: (attributes)
  singleton: 0
  id: 284
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 283
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 285
  comment: |
    # Initializes the +attribute+ to zero if nil and adds one. Only makes sense for number-based attributes. Returns self.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 286
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1275
          def increment(attribute)
            self[attribute] ||= 0
            self[attribute] += 1
            self
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: increment
  visibility: 1
  ra_comment_id: 285
  file_id: 3
  ra_container_id: 29
  parameters: (attribute)
  singleton: 0
  id: 287
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 286
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 288
  comment: |
    # Increments the +attribute+ and saves the record.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 289
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1282
          def increment!(attribute)
            increment(attribute).update_attribute(attribute, self[attribute])
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: increment!
  visibility: 1
  ra_comment_id: 288
  file_id: 3
  ra_container_id: 29
  parameters: (attribute)
  singleton: 0
  id: 290
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 289
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 291
  comment: |
    # Initializes the +attribute+ to zero if nil and subtracts one. Only makes sense for number-based attributes. Returns self.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 292
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1287
          def decrement(attribute)
            self[attribute] ||= 0
            self[attribute] -= 1
            self
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: decrement
  visibility: 1
  ra_comment_id: 291
  file_id: 3
  ra_container_id: 29
  parameters: (attribute)
  singleton: 0
  id: 293
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 292
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 294
  comment: |
    # Decrements the +attribute+ and saves the record.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 295
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1294
          def decrement!(attribute)
            decrement(attribute).update_attribute(attribute, self[attribute])
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: decrement!
  visibility: 1
  ra_comment_id: 294
  file_id: 3
  ra_container_id: 29
  parameters: (attribute)
  singleton: 0
  id: 296
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 295
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 297
  comment: |
    # Turns an +attribute+ that's currently true into false and vice versa. Returns self.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 298
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1299
          def toggle(attribute)
            self[attribute] = !send("#{attribute}?")
            self
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: toggle
  visibility: 1
  ra_comment_id: 297
  file_id: 3
  ra_container_id: 29
  parameters: (attribute)
  singleton: 0
  id: 299
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 298
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 300
  comment: |
    # Toggles the +attribute+ and saves the record.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 301
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1305
          def toggle!(attribute)
            toggle(attribute).update_attribute(attribute, self[attribute])
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: toggle!
  visibility: 1
  ra_comment_id: 300
  file_id: 3
  ra_container_id: 29
  parameters: (attribute)
  singleton: 0
  id: 302
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 301
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 303
  comment: |
    # Reloads the attributes of this object from the database.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 304
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1310
          def reload
            clear_aggregation_cache
            clear_association_cache
            @attributes.update(self.class.find(self.id).instance_variable_get('@attributes'))
            self
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: reload
  visibility: 1
  ra_comment_id: 303
  file_id: 3
  ra_container_id: 29
  parameters: ()
  singleton: 0
  id: 305
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 304
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 306
  comment: |
    # Returns the value of the attribute identified by <tt>attr_name</tt> after it has been typecast (for example,
    # "2004-12-12" in a data column is cast to a date object, like Date.new(2004, 12, 12)).
    # (Alias for the protected read_attribute method).

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 307
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1320
          def [](attr_name)
            read_attribute(attr_name)
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: "[]"
  visibility: 1
  ra_comment_id: 306
  file_id: 3
  ra_container_id: 29
  parameters: (attr_name)
  singleton: 0
  id: 308
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 307
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 309
  comment: |
    # Updates the attribute identified by <tt>attr_name</tt> with the specified +value+.
    # (Alias for the protected write_attribute method).

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 310
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1326
          def []=(attr_name, value)
            write_attribute(attr_name, value)
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: "[]="
  visibility: 1
  ra_comment_id: 309
  file_id: 3
  ra_container_id: 29
  parameters: (attr_name, value)
  singleton: 0
  id: 311
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 310
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 312
  comment: |
    # Allows you to set all the attributes at once by passing in a hash with keys
    # matching the attribute names (which again matches the column names). Sensitive attributes can be protected
    # from this form of mass-assignment by using the +attr_protected+ macro. Or you can alternatively
    # specify which attributes *can* be accessed in with the +attr_accessible+ macro. Then all the
    # attributes not included in that won't be allowed to be mass-assigned.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 313
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1335
          def attributes=(attributes)
            return if attributes.nil?
            attributes.stringify_keys!
    
            multi_parameter_attributes = []
            remove_attributes_protected_from_mass_assignment(attributes).each do |k, v|
              k.include?("(") ? multi_parameter_attributes << [ k, v ] : send(k + "=", v)
            end
            assign_multiparameter_attributes(multi_parameter_attributes)
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: attributes=
  visibility: 1
  ra_comment_id: 312
  file_id: 3
  ra_container_id: 29
  parameters: (attributes)
  singleton: 0
  id: 314
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 313
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 315
  comment: |
    # Returns a hash of all the attributes with their names as keys and clones of their objects as values.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 316
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1347
          def attributes
            clone_attributes :read_attribute
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: attributes
  visibility: 1
  ra_comment_id: 315
  file_id: 3
  ra_container_id: 29
  parameters: ()
  singleton: 0
  id: 317
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 316
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 318
  comment: |
    # Returns a hash of cloned attributes before typecasting and deserialization.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 319
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1352
          def attributes_before_type_cast
            clone_attributes :read_attribute_before_type_cast
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: attributes_before_type_cast
  visibility: 1
  ra_comment_id: 318
  file_id: 3
  ra_container_id: 29
  parameters: ()
  singleton: 0
  id: 320
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 319
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 321
  comment: |
    # Returns true if the specified +attribute+ has been set by the user or by a database load and is neither
    # nil nor empty? (the latter only applies to objects that respond to empty?, most notably Strings).

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 322
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1358
          def attribute_present?(attribute)
            value = read_attribute(attribute)
            !value.blank? or value == 0
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: attribute_present?
  visibility: 1
  ra_comment_id: 321
  file_id: 3
  ra_container_id: 29
  parameters: (attribute)
  singleton: 0
  id: 323
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 322
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 324
  comment: |
    # Returns true if the given attribute is in the attributes hash

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 325
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1364
          def has_attribute?(attr_name)
            @attributes.has_key?(attr_name.to_s)
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: has_attribute?
  visibility: 1
  ra_comment_id: 324
  file_id: 3
  ra_container_id: 29
  parameters: (attr_name)
  singleton: 0
  id: 326
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 325
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 327
  comment: |
    # Returns an array of names for the attributes available on this object sorted alphabetically.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 328
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1369
          def attribute_names
            @attributes.keys.sort
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: attribute_names
  visibility: 1
  ra_comment_id: 327
  file_id: 3
  ra_container_id: 29
  parameters: ()
  singleton: 0
  id: 329
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 328
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 330
  comment: |
    # Returns the column object for the named attribute.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 331
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1374
          def column_for_attribute(name)
            self.class.columns_hash[name.to_s]
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: column_for_attribute
  visibility: 1
  ra_comment_id: 330
  file_id: 3
  ra_container_id: 29
  parameters: (name)
  singleton: 0
  id: 332
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 331
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 333
  comment: |
    # Returns true if the +comparison_object+ is the same object, or is of the same type and has the same id.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 334
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1379
          def ==(comparison_object)
            comparison_object.equal?(self) ||
              (comparison_object.instance_of?(self.class) && 
                comparison_object.id == id && 
                !comparison_object.new_record?)
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: ==
  visibility: 1
  ra_comment_id: 333
  file_id: 3
  ra_container_id: 29
  parameters: (comparison_object)
  singleton: 0
  id: 335
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 334
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 336
  comment: |
    # Delegates to ==

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 337
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1387
          def eql?(comparison_object)
            self == (comparison_object)
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: eql?
  visibility: 1
  ra_comment_id: 336
  file_id: 3
  ra_container_id: 29
  parameters: (comparison_object)
  singleton: 0
  id: 338
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 337
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 339
  comment: |
    # Delegates to id in order to allow two records of the same type and id to work with something like:
    #   [ Person.find(1), Person.find(2), Person.find(3) ] & [ Person.find(1), Person.find(4) ] # => [ Person.find(1) ]

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 340
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1393
          def hash
            id.hash
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: hash
  visibility: 1
  ra_comment_id: 339
  file_id: 3
  ra_container_id: 29
  parameters: ()
  singleton: 0
  id: 341
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 340
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 342
  comment: |
    # A Person object with a name attribute can ask person.respond_to?("name"), person.respond_to?("name="), and
    # person.respond_to?("name?") which will all return true.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 343
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1402
          def respond_to?(method, include_priv = false)
            if attr_name = self.class.column_methods_hash[method.to_sym]
              return true if @attributes.include?(attr_name) || attr_name == self.class.primary_key
              return false if self.class.read_methods.include?(attr_name)
            elsif @attributes.include?(method_name = method.to_s)
              return true
            elsif md = /(=|\?|_before_type_cast)$/.match(method_name)
              return true if @attributes.include?(md.pre_match)
            end
            # super must be called at the end of the method, because the inherited respond_to?
            # would return true for generated readers, even if the attribute wasn't present
            super
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: respond_to?
  visibility: 1
  ra_comment_id: 342
  file_id: 3
  ra_container_id: 29
  parameters: (method, include_priv = false)
  singleton: 0
  id: 344
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 343
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 345
  comment: |
    # Just freeze the attributes hash, such that associations are still accessible even on destroyed records.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 346
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1417
          def freeze
            @attributes.freeze; self
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: freeze
  visibility: 1
  ra_comment_id: 345
  file_id: 3
  ra_container_id: 29
  parameters: ()
  singleton: 0
  id: 347
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 346
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 348
  comment: ""
new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 349
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1421
          def frozen?
            @attributes.frozen?
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: frozen?
  visibility: 1
  ra_comment_id: 348
  file_id: 3
  ra_container_id: 29
  parameters: ()
  singleton: 0
  id: 350
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 349
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 351
  comment: ""
new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 352
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1425
          def readonly?
            @readonly == true
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: readonly?
  visibility: 1
  ra_comment_id: 351
  file_id: 3
  ra_container_id: 29
  parameters: ()
  singleton: 0
  id: 353
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 352
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 354
  comment: ""
new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 355
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1429
          def readonly!
            @readonly = true
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: readonly!
  visibility: 1
  ra_comment_id: 354
  file_id: 3
  ra_container_id: 29
  parameters: ()
  singleton: 0
  id: 356
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 355
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 357
  comment: ""
new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 358
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1434
          def create_or_update
            if new_record? then create else update end
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: create_or_update
  visibility: 2
  ra_comment_id: 357
  file_id: 3
  ra_container_id: 29
  parameters: ()
  singleton: 0
  id: 359
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 358
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 360
  comment: |
    # Updates the associated record with values matching those of the instance attributes.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 361
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1439
          def update
            connection.update(
              "UPDATE #{self.class.table_name} " +
              "SET #{quoted_comma_pair_list(connection, attributes_with_quotes(false))} " +
              "WHERE #{self.class.primary_key} = #{quote(id)}",
              "#{self.class.name} Update"
            )
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: update
  visibility: 2
  ra_comment_id: 360
  file_id: 3
  ra_container_id: 29
  parameters: ()
  singleton: 0
  id: 362
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 361
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 363
  comment: |
    # Creates a new record with values matching those of the instance attributes.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 364
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1449
          def create
            if self.id.nil? and connection.prefetch_primary_key?(self.class.table_name)
              self.id = connection.next_sequence_value(self.class.sequence_name)
            end
    
            self.id = connection.insert(
              "INSERT INTO #{self.class.table_name} " +
              "(#{quoted_column_names.join(', ')}) " +
              "VALUES(#{attributes_with_quotes.values.join(', ')})",
              "#{self.class.name} Create",
              self.class.primary_key, self.id, self.class.sequence_name
            )
    
            @new_record = false
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: create
  visibility: 2
  ra_comment_id: 363
  file_id: 3
  ra_container_id: 29
  parameters: ()
  singleton: 0
  id: 365
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 364
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 366
  comment: |
    # Sets the attribute used for single table inheritance to this class name if this is not the ActiveRecord descendent.
    # Considering the hierarchy Reply < Message < ActiveRecord, this makes it possible to do Reply.new without having to
    # set Reply[Reply.inheritance_column] = "Reply" yourself. No such attribute would be set for objects of the
    # Message class in that example.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 367
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1469
          def ensure_proper_type
            unless self.class.descends_from_active_record?
              write_attribute(self.class.inheritance_column, Inflector.demodulize(self.class.name))
            end
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: ensure_proper_type
  visibility: 2
  ra_comment_id: 366
  file_id: 3
  ra_container_id: 29
  parameters: ()
  singleton: 0
  id: 368
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 367
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 369
  comment: |
    # Allows access to the object attributes, which are held in the @attributes hash, as were
    # they first-class methods. So a Person class with a name attribute can use Person#name and
    # Person#name= and never directly use the attributes hash -- except for multiple assigns with
    # ActiveRecord#attributes=. A Milestone class can also ask Milestone#completed? to test that
    # the completed attribute is not nil or 0.
    #
    # It's also possible to instantiate related objects, so a Client class belonging to the clients
    # table with a master_id foreign key can instantiate master through Client#master.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 370
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1483
          def method_missing(method_id, *args, &block)
            method_name = method_id.to_s
            if @attributes.include?(method_name)
              define_read_methods if self.class.read_methods.empty? && self.class.generate_read_methods
              read_attribute(method_name)
            elsif self.class.primary_key.to_s == method_name
              id
            elsif md = /(=|\?|_before_type_cast)$/.match(method_name)
              attribute_name, method_type = md.pre_match, md.to_s
              if @attributes.include?(attribute_name)
                case method_type
                  when '='
                    write_attribute(attribute_name, args.first)
                  when '?'
                    query_attribute(attribute_name)
                  when '_before_type_cast'
                    read_attribute_before_type_cast(attribute_name)
                end
              else
                super
              end
            else
              super
            end
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: method_missing
  visibility: 2
  ra_comment_id: 369
  file_id: 3
  ra_container_id: 29
  parameters: (method_id, *args, &block)
  singleton: 0
  id: 371
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 370
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 372
  comment: |
    # Returns the value of the attribute identified by <tt>attr_name</tt> after it has been typecast (for example,
    # "2004-12-12" in a data column is cast to a date object, like Date.new(2004, 12, 12)).

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 373
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1511
          def read_attribute(attr_name)
            attr_name = attr_name.to_s
            if !(value = @attributes[attr_name]).nil?
              if column = column_for_attribute(attr_name)
                if unserializable_attribute?(attr_name, column)
                  unserialize_attribute(attr_name)
                else
                  column.type_cast(value)
                end
              else
                value
              end
            else
              nil
            end
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: read_attribute
  visibility: 2
  ra_comment_id: 372
  file_id: 3
  ra_container_id: 29
  parameters: (attr_name)
  singleton: 0
  id: 374
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 373
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 375
  comment: ""
new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 376
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1528
          def read_attribute_before_type_cast(attr_name)
            @attributes[attr_name]
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: read_attribute_before_type_cast
  visibility: 2
  ra_comment_id: 375
  file_id: 3
  ra_container_id: 29
  parameters: (attr_name)
  singleton: 0
  id: 377
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 376
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 378
  comment: |
    # Called on first read access to any given column and generates reader
    # methods for all columns in the columns_hash if
    # ActiveRecord::Base.generate_read_methods is set to true.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 379
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1535
          def define_read_methods
            self.class.columns_hash.each do |name, column|
              unless self.class.serialized_attributes[name] || respond_to_without_attributes?(name)
                define_read_method(name.to_sym, name, column)
              end
            end
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: define_read_methods
  visibility: 2
  ra_comment_id: 378
  file_id: 3
  ra_container_id: 29
  parameters: ()
  singleton: 0
  id: 380
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 379
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 381
  comment: |
    # Define an attribute reader method.  Cope with nil column.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 382
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1544
          def define_read_method(symbol, attr_name, column)
            cast_code = column.type_cast_code('v') if column
            access_code = cast_code ? "(v=@attributes['#{attr_name}']) && #{cast_code}" : "@attributes['#{attr_name}']"
    
            unless attr_name.to_s == self.class.primary_key.to_s
              access_code = access_code.insert(0, "raise NoMethodError, 'missing attribute: #{attr_name}', caller unless @attributes.has_key?('#{attr_name}'); ")
              self.class.read_methods << attr_name
            end
    
            begin
              self.class.class_eval("def #{symbol}; #{access_code}; end")
            rescue SyntaxError => err
              self.class.read_methods.delete(attr_name)
              if logger
                logger.warn "Exception occured during reader method compilation."
                logger.warn "Maybe #{attr_name} is not a valid Ruby identifier?"
                logger.warn "#{err.message}"
              end
            end
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: define_read_method
  visibility: 2
  ra_comment_id: 381
  file_id: 3
  ra_container_id: 29
  parameters: (symbol, attr_name, column)
  singleton: 0
  id: 383
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 382
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 384
  comment: |
    # Returns true if the attribute is of a text column and marked for serialization.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 385
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1566
          def unserializable_attribute?(attr_name, column)
            column.text? && self.class.serialized_attributes[attr_name]
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: unserializable_attribute?
  visibility: 2
  ra_comment_id: 384
  file_id: 3
  ra_container_id: 29
  parameters: (attr_name, column)
  singleton: 0
  id: 386
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 385
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 387
  comment: |
    # Returns the unserialized object of the attribute.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 388
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1571
          def unserialize_attribute(attr_name)
            unserialized_object = object_from_yaml(@attributes[attr_name])
    
            if unserialized_object.is_a?(self.class.serialized_attributes[attr_name])
              @attributes[attr_name] = unserialized_object
            else
              raise SerializationTypeMismatch,
                "#{attr_name} was supposed to be a #{self.class.serialized_attributes[attr_name]}, but was a #{unserialized_object.class.to_s}"
            end
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: unserialize_attribute
  visibility: 2
  ra_comment_id: 387
  file_id: 3
  ra_container_id: 29
  parameters: (attr_name)
  singleton: 0
  id: 389
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 388
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 390
  comment: |
    # Updates the attribute identified by <tt>attr_name</tt> with the specified +value+. Empty strings for fixnum and float
    # columns are turned into nil.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 391
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1584
          def write_attribute(attr_name, value)
            attr_name = attr_name.to_s
            if (column = column_for_attribute(attr_name)) && column.number?
              @attributes[attr_name] = convert_number_column_value(value)
            else
              @attributes[attr_name] = value
            end
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: write_attribute
  visibility: 2
  ra_comment_id: 390
  file_id: 3
  ra_container_id: 29
  parameters: (attr_name, value)
  singleton: 0
  id: 392
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 391
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 393
  comment: ""
new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 394
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1593
          def convert_number_column_value(value)
            case value
              when FalseClass: 0
              when TrueClass:  1
              when '':         nil
              else value
            end
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: convert_number_column_value
  visibility: 2
  ra_comment_id: 393
  file_id: 3
  ra_container_id: 29
  parameters: (value)
  singleton: 0
  id: 395
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 394
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 396
  comment: ""
new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 397
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1602
          def query_attribute(attr_name)
            attribute = @attributes[attr_name]
            if attribute.kind_of?(Fixnum) && attribute == 0
              false
            elsif attribute.kind_of?(String) && attribute == "0"
              false
            elsif attribute.kind_of?(String) && attribute.empty?
              false
            elsif attribute.nil?
              false
            elsif attribute == false
              false
            elsif attribute == "f"
              false
            elsif attribute == "false"
              false
            else
              true
            end
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: query_attribute
  visibility: 2
  ra_comment_id: 396
  file_id: 3
  ra_container_id: 29
  parameters: (attr_name)
  singleton: 0
  id: 398
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 397
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 399
  comment: ""
new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 400
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1623
          def remove_attributes_protected_from_mass_assignment(attributes)
            if self.class.accessible_attributes.nil? && self.class.protected_attributes.nil?
              attributes.reject { |key, value| attributes_protected_by_default.include?(key.gsub(/\(.+/, "")) }
            elsif self.class.protected_attributes.nil?
              attributes.reject { |key, value| !self.class.accessible_attributes.include?(key.gsub(/\(.+/, "").intern) || attributes_protected_by_default.include?(key.gsub(/\(.+/, "")) }
            elsif self.class.accessible_attributes.nil?
              attributes.reject { |key, value| self.class.protected_attributes.include?(key.gsub(/\(.+/,"").intern) || attributes_protected_by_default.include?(key.gsub(/\(.+/, "")) }
            end
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: remove_attributes_protected_from_mass_assignment
  visibility: 2
  ra_comment_id: 399
  file_id: 3
  ra_container_id: 29
  parameters: (attributes)
  singleton: 0
  id: 401
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 400
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 402
  comment: |
    # The primary key and inheritance column can never be set by mass-assignment for security reasons.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 403
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1634
          def attributes_protected_by_default
            default = [ self.class.primary_key, self.class.inheritance_column ]
            default << 'id' unless self.class.primary_key.eql? 'id'
            default
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: attributes_protected_by_default
  visibility: 2
  ra_comment_id: 402
  file_id: 3
  ra_container_id: 29
  parameters: ()
  singleton: 0
  id: 404
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 403
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 405
  comment: |
    # Returns copy of the attributes hash where all the values have been safely quoted for use in
    # an SQL statement.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 406
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1642
          def attributes_with_quotes(include_primary_key = true)
            attributes.inject({}) do |quoted, (name, value)|
              if column = column_for_attribute(name)
                quoted[name] = quote(value, column) unless !include_primary_key && column.primary
              end
              quoted
            end
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: attributes_with_quotes
  visibility: 2
  ra_comment_id: 405
  file_id: 3
  ra_container_id: 29
  parameters: (include_primary_key = true)
  singleton: 0
  id: 407
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 406
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 408
  comment: |
    # Quote strings appropriately for SQL statements.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 409
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1652
          def quote(value, column = nil)
            self.class.connection.quote(value, column)
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: quote
  visibility: 2
  ra_comment_id: 408
  file_id: 3
  ra_container_id: 29
  parameters: (value, column = nil)
  singleton: 0
  id: 410
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 409
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 411
  comment: |
    # Interpolate custom sql string in instance context.
    # Optional record argument is meant for custom insert_sql.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 412
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1658
          def interpolate_sql(sql, record = nil)
            instance_eval("%@#{sql.gsub('@', '\@')}@")
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: interpolate_sql
  visibility: 2
  ra_comment_id: 411
  file_id: 3
  ra_container_id: 29
  parameters: (sql, record = nil)
  singleton: 0
  id: 413
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 412
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 414
  comment: |
    # Initializes the attributes array with keys matching the columns from the linked table and
    # the values matching the corresponding default value of that column, so
    # that a new instance, or one populated from a passed-in Hash, still has all the attributes
    # that instances loaded from the database would.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 415
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1666
          def attributes_from_column_definition
            self.class.columns.inject({}) do |attributes, column|
              attributes[column.name] = column.default unless column.name == self.class.primary_key
              attributes
            end
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: attributes_from_column_definition
  visibility: 2
  ra_comment_id: 414
  file_id: 3
  ra_container_id: 29
  parameters: ()
  singleton: 0
  id: 416
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 415
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 417
  comment: |
    # Instantiates objects for all attribute classes that needs more than one constructor parameter. This is done
    # by calling new on the column type or aggregation type (through composed_of) object with these parameters.
    # So having the pairs written_on(1) = "2004", written_on(2) = "6", written_on(3) = "24", will instantiate
    # written_on (a date type) with Date.new("2004", "6", "24"). You can also specify a typecast character in the
    # parentheses to have the parameters typecasted before they're used in the constructor. Use i for Fixnum, f for Float,
    # s for String, and a for Array. If all the values for a given attribute is empty, the attribute will be set to nil.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 418
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1679
          def assign_multiparameter_attributes(pairs)
            execute_callstack_for_multiparameter_attributes(
              extract_callstack_for_multiparameter_attributes(pairs)
            )
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: assign_multiparameter_attributes
  visibility: 2
  ra_comment_id: 417
  file_id: 3
  ra_container_id: 29
  parameters: (pairs)
  singleton: 0
  id: 419
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 418
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 420
  comment: |
    # Includes an ugly hack for Time.local instead of Time.new because the latter is reserved by Time itself.

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 421
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1686
          def execute_callstack_for_multiparameter_attributes(callstack)
            errors = []
            callstack.each do |name, values|
              klass = (self.class.reflect_on_aggregation(name) || column_for_attribute(name)).klass
              if values.empty?
                send(name + "=", nil)
              else
                begin
                  send(name + "=", Time == klass ? klass.local(*values) : klass.new(*values))
                rescue => ex
                  errors << AttributeAssignmentError.new("error on assignment #{values.inspect} to #{name}", ex, name)
                end
              end
            end
            unless errors.empty?
              raise MultiparameterAssignmentErrors.new(errors), "#{errors.size} error(s) on assignment of multiparameter attributes"
            end
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: execute_callstack_for_multiparameter_attributes
  visibility: 2
  ra_comment_id: 420
  file_id: 3
  ra_container_id: 29
  parameters: (callstack)
  singleton: 0
  id: 422
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 421
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 423
  comment: ""
new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 424
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1705
          def extract_callstack_for_multiparameter_attributes(pairs)
            attributes = { }
    
            for pair in pairs
              multiparameter_name, value = pair
              attribute_name = multiparameter_name.split("(").first
              attributes[attribute_name] = [] unless attributes.include?(attribute_name)
    
              unless value.empty?
                attributes[attribute_name] <<
                  [ find_parameter_position(multiparameter_name), type_cast_attribute_value(multiparameter_name, value) ]
              end
            end
    
            attributes.each { |name, values| attributes[name] = values.sort_by{ |v| v.first }.collect { |v| v.last } }
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: extract_callstack_for_multiparameter_attributes
  visibility: 2
  ra_comment_id: 423
  file_id: 3
  ra_container_id: 29
  parameters: (pairs)
  singleton: 0
  id: 425
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 424
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 426
  comment: ""
new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 427
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1722
          def type_cast_attribute_value(multiparameter_name, value)
            multiparameter_name =~ /\([0-9]*([a-z])\)/ ? value.send("to_" + $1) : value
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: type_cast_attribute_value
  visibility: 2
  ra_comment_id: 426
  file_id: 3
  ra_container_id: 29
  parameters: (multiparameter_name, value)
  singleton: 0
  id: 428
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 427
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 429
  comment: ""
new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 430
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1726
          def find_parameter_position(multiparameter_name)
            multiparameter_name.scan(/\(([0-9]*).*\)/).first.first
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: find_parameter_position
  visibility: 2
  ra_comment_id: 429
  file_id: 3
  ra_container_id: 29
  parameters: (multiparameter_name)
  singleton: 0
  id: 431
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 430
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 432
  comment: |
    # Returns a comma-separated pair list, like "key1 = val1, key2 = val2".

new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 433
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1731
          def comma_pair_list(hash)
            hash.inject([]) { |list, pair| list << "#{pair.first} = #{pair.last}" }.join(", ")
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: comma_pair_list
  visibility: 2
  ra_comment_id: 432
  file_id: 3
  ra_container_id: 29
  parameters: (hash)
  singleton: 0
  id: 434
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 433
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 435
  comment: ""
new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 436
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1735
          def quoted_column_names(attributes = attributes_with_quotes)
            attributes.keys.collect do |column_name|
              self.class.connection.quote_column_name(column_name)
            end
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: quoted_column_names
  visibility: 2
  ra_comment_id: 435
  file_id: 3
  ra_container_id: 29
  parameters: (attributes = attributes_with_quotes)
  singleton: 0
  id: 437
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 436
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 438
  comment: ""
new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 439
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1741
          def quote_columns(quoter, hash)
            hash.inject({}) do |quoted, (name, value)|
              quoted[quoter.quote_column_name(name)] = value
              quoted
            end
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: quote_columns
  visibility: 2
  ra_comment_id: 438
  file_id: 3
  ra_container_id: 29
  parameters: (quoter, hash)
  singleton: 0
  id: 440
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 439
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 441
  comment: ""
new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 442
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1748
          def quoted_comma_pair_list(quoter, hash)
            comma_pair_list(quote_columns(quoter, hash))
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: quoted_comma_pair_list
  visibility: 2
  ra_comment_id: 441
  file_id: 3
  ra_container_id: 29
  parameters: (quoter, hash)
  singleton: 0
  id: 443
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 442
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 444
  comment: ""
new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 445
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1752
          def object_from_yaml(string)
            return string unless string.is_a?(String)
            YAML::load(string) rescue string
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: object_from_yaml
  visibility: 2
  ra_comment_id: 444
  file_id: 3
  ra_container_id: 29
  parameters: (string)
  singleton: 0
  id: 446
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 445
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 447
  comment: ""
new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 448
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1757
          def clone_attributes(reader_method = :read_attribute, attributes = {})
            self.attribute_names.inject(attributes) do |attributes, name|
              attributes[name] = clone_attribute_value(reader_method, name)
              attributes
            end
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: clone_attributes
  visibility: 2
  ra_comment_id: 447
  file_id: 3
  ra_container_id: 29
  parameters: (reader_method = :read_attribute, attributes = {})
  singleton: 0
  id: 449
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 448
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 450
  comment: ""
new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 451
  source_code: |-
    # File testdoc-0.0.1/base.rb, line 1764
          def clone_attribute_value(reader_method, attribute_name)
            value = send(reader_method, attribute_name)
            value.clone
          rescue TypeError, NoMethodError
            value
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: clone_attribute_value
  visibility: 2
  ra_comment_id: 450
  file_id: 3
  ra_container_id: 29
  parameters: (reader_method, attribute_name)
  singleton: 0
  id: 452
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 451
new_record: true

--- !ruby/object:RaAlias 
attributes: 
  name: set_table_name
  file_id: 3
  ra_container_id: 29
  type: RaAlias
  id: 453
  value: table_name=
  comment: ""
new_record: true

--- !ruby/object:RaAlias 
attributes: 
  name: set_primary_key
  file_id: 3
  ra_container_id: 29
  type: RaAlias
  id: 454
  value: primary_key=
  comment: ""
new_record: true

--- !ruby/object:RaAlias 
attributes: 
  name: set_inheritance_column
  file_id: 3
  ra_container_id: 29
  type: RaAlias
  id: 455
  value: inheritance_column=
  comment: ""
new_record: true

--- !ruby/object:RaAlias 
attributes: 
  name: set_sequence_name
  file_id: 3
  ra_container_id: 29
  type: RaAlias
  id: 456
  value: sequence_name=
  comment: ""
new_record: true

--- !ruby/object:RaAlias 
attributes: 
  name: sanitize_sql
  file_id: 3
  ra_container_id: 29
  type: RaAlias
  id: 457
  value: sanitize_conditions
  comment: ""
new_record: true

--- !ruby/object:RaAlias 
attributes: 
  name: respond_to?
  file_id: 3
  ra_container_id: 29
  type: RaAlias
  id: 458
  value: respond_to_without_attributes?
  comment: |
    # For checking respond_to? without searching the attributes (which is faster).

new_record: true

--- !ruby/object:RaConstant 
attributes: 
  name: SOME_TEST_CONSTANT
  file_id: 3
  ra_container_id: 29
  type: RaConstant
  id: 459
  value: "\"blahlbah\""
  comment: 
new_record: true

--- !ruby/object:RaConstant 
attributes: 
  name: ANOTHER_TEST_CONSTANT
  file_id: 3
  ra_container_id: 29
  type: RaConstant
  id: 460
  value: "\"blah2\""
  comment: 
new_record: true

--- !ruby/object:RaInFile 
attributes: 
  ra_container_id: 29
  file_name: testdoc-0.0.1/base.rb
  id: 461
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 462
  comment: ""
new_record: true

--- !ruby/object:RaClass 
attributes: 
  superclass: ActiveRecordError
  ra_comment_id: 462
  name: SerializationTypeMismatch
  ra_library_id: 0
  type: RaClass
  id: 463
  parent_id: 8
  full_name: ActiveRecord::SerializationTypeMismatch
new_record: true

--- !ruby/object:RaInFile 
attributes: 
  ra_container_id: 463
  file_name: testdoc-0.0.1/base.rb
  id: 464
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 465
  comment: ""
new_record: true

--- !ruby/object:RaClass 
attributes: 
  superclass: StandardError
  ra_comment_id: 465
  name: ActiveRecordError
  ra_library_id: 0
  type: RaClass
  id: 466
  parent_id: 8
  full_name: ActiveRecord::ActiveRecordError
new_record: true

--- !ruby/object:RaInFile 
attributes: 
  ra_container_id: 466
  file_name: testdoc-0.0.1/base.rb
  id: 467
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 468
  comment: ""
new_record: true

--- !ruby/object:RaClass 
attributes: 
  superclass: StandardError
  ra_comment_id: 468
  name: ConfigurationError
  ra_library_id: 0
  type: RaClass
  id: 469
  parent_id: 8
  full_name: ActiveRecord::ConfigurationError
new_record: true

--- !ruby/object:RaInFile 
attributes: 
  ra_container_id: 469
  file_name: testdoc-0.0.1/base.rb
  id: 470
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 471
  comment: ""
new_record: true

--- !ruby/object:RaClass 
attributes: 
  superclass: ActiveRecordError
  ra_comment_id: 471
  name: ConnectionNotEstablished
  ra_library_id: 0
  type: RaClass
  id: 472
  parent_id: 8
  full_name: ActiveRecord::ConnectionNotEstablished
new_record: true

--- !ruby/object:RaInFile 
attributes: 
  ra_container_id: 472
  file_name: testdoc-0.0.1/base.rb
  id: 473
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 474
  comment: ""
new_record: true

--- !ruby/object:RaClass 
attributes: 
  superclass: ActiveRecordError
  ra_comment_id: 474
  name: SubclassNotFound
  ra_library_id: 0
  type: RaClass
  id: 475
  parent_id: 8
  full_name: ActiveRecord::SubclassNotFound
new_record: true

--- !ruby/object:RaInFile 
attributes: 
  ra_container_id: 475
  file_name: testdoc-0.0.1/base.rb
  id: 476
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 477
  comment: ""
new_record: true

--- !ruby/object:RaClass 
attributes: 
  superclass: ActiveRecordError
  ra_comment_id: 477
  name: MultiparameterAssignmentErrors
  ra_library_id: 0
  type: RaClass
  id: 478
  parent_id: 8
  full_name: ActiveRecord::MultiparameterAssignmentErrors
new_record: true

--- !ruby/object:RaInFile 
attributes: 
  ra_container_id: 478
  file_name: testdoc-0.0.1/base.rb
  id: 479
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 480
  comment: ""
new_record: true

--- !ruby/object:RaClass 
attributes: 
  superclass: ActiveRecordError
  ra_comment_id: 480
  name: AdapterNotFound
  ra_library_id: 0
  type: RaClass
  id: 481
  parent_id: 8
  full_name: ActiveRecord::AdapterNotFound
new_record: true

--- !ruby/object:RaInFile 
attributes: 
  ra_container_id: 481
  file_name: testdoc-0.0.1/base.rb
  id: 482
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 483
  comment: ""
new_record: true

--- !ruby/object:RaClass 
attributes: 
  superclass: ActiveRecordError
  ra_comment_id: 483
  name: StaleObjectError
  ra_library_id: 0
  type: RaClass
  id: 484
  parent_id: 8
  full_name: ActiveRecord::StaleObjectError
new_record: true

--- !ruby/object:RaInFile 
attributes: 
  ra_container_id: 484
  file_name: testdoc-0.0.1/base.rb
  id: 485
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 486
  comment: ""
new_record: true

--- !ruby/object:RaClass 
attributes: 
  superclass: ActiveRecordError
  ra_comment_id: 486
  name: PreparedStatementInvalid
  ra_library_id: 0
  type: RaClass
  id: 487
  parent_id: 8
  full_name: ActiveRecord::PreparedStatementInvalid
new_record: true

--- !ruby/object:RaInFile 
attributes: 
  ra_container_id: 487
  file_name: testdoc-0.0.1/base.rb
  id: 488
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 489
  comment: ""
new_record: true

--- !ruby/object:RaClass 
attributes: 
  superclass: ActiveRecordError
  ra_comment_id: 489
  name: ConnectionFailed
  ra_library_id: 0
  type: RaClass
  id: 490
  parent_id: 8
  full_name: ActiveRecord::ConnectionFailed
new_record: true

--- !ruby/object:RaInFile 
attributes: 
  ra_container_id: 490
  file_name: testdoc-0.0.1/base.rb
  id: 491
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 492
  comment: ""
new_record: true

--- !ruby/object:RaFile 
attributes: 
  ra_comment_id: 492
  name: testdoc-0.0.1/testit.rb
  ra_library_id: 0
  type: RaFile
  id: 493
  parent_id: 0
  full_name: testdoc-0.0.1/testit.rb
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 494
  comment: ""
new_record: true

--- !ruby/object:RaClass 
attributes: 
  superclass: Object
  ra_comment_id: 494
  name: Stuff
  ra_library_id: 0
  type: RaClass
  id: 495
  parent_id: 493
  full_name: Stuff
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 496
  comment: ""
new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 497
  source_code: |-
    # File testdoc-0.0.1/testit.rb, line 10
       def testit()
         i = 1
       end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: testit
  visibility: 1
  ra_comment_id: 496
  file_id: 493
  ra_container_id: 495
  parameters: ()
  singleton: 0
  id: 498
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 497
new_record: true

--- !ruby/object:RaInFile 
attributes: 
  ra_container_id: 495
  file_name: testdoc-0.0.1/testit.rb
  id: 499
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 500
  comment: ""
new_record: true

--- !ruby/object:RaModule 
attributes: 
  superclass: 
  ra_comment_id: 500
  name: ActiveRecord
  ra_library_id: 0
  type: RaModule
  id: 501
  parent_id: 495
  full_name: Stuff::ActiveRecord
new_record: true

--- !ruby/object:RaInFile 
attributes: 
  ra_container_id: 501
  file_name: testdoc-0.0.1/testit.rb
  id: 502
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 503
  comment: ""
new_record: true

--- !ruby/object:RaClass 
attributes: 
  superclass: Object
  ra_comment_id: 503
  name: Base
  ra_library_id: 0
  type: RaClass
  id: 504
  parent_id: 501
  full_name: Stuff::ActiveRecord::Base
new_record: true

--- !ruby/object:RaComment 
attributes: 
  id: 505
  comment: ""
new_record: true

--- !ruby/object:RaSourceCode 
attributes: 
  id: 506
  source_code: |-
    # File testdoc-0.0.1/testit.rb, line 5
          def test2()
            i = 1
          end
new_record: true

--- !ruby/object:RaMethod 
attributes: 
  name: test2
  visibility: 1
  ra_comment_id: 505
  file_id: 493
  ra_container_id: 504
  parameters: ()
  singleton: 0
  id: 507
  block_parameters: 
  force_documentation: 0
  ra_source_code_id: 506
new_record: true

--- !ruby/object:RaInFile 
attributes: 
  ra_container_id: 504
  file_name: testdoc-0.0.1/testit.rb
  id: 508
new_record: true

